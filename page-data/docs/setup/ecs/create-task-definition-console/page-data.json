{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/setup/ecs/create-task-definition-console",
    "result": {"data":{"mdx":{"id":"7fe37a7b-9611-5c94-a475-e2e1470f5075","excerpt":"In this tutorial, we will demonstrate how to install ADOT Collector using Task Definition on the Amazon Elastic\nContainer Service (Amazon ECS) through AWSâ€¦","fields":{"slug":"/docs/setup/ecs/create-task-definition-console/"},"frontmatter":{"title":"Install ADOT Collector By Creating Task Definition Through AWS Console ","description":"In this tutorial, we will demonstrate how to install ADOT Collector using Task Definition on the Amazon Elastic Container Service (Amazon ECS) through AWS console.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Install ADOT Collector By Creating Task Definition Through AWS Console \",\n  \"description\": \"In this tutorial, we will demonstrate how to install ADOT Collector using Task Definition on the Amazon Elastic Container Service (Amazon ECS) through AWS console.\",\n  \"path\": \"/docs/setup/ecs/create-task-definition-console\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this tutorial, we will demonstrate how to install ADOT Collector using Task Definition on the Amazon Elastic\\nContainer Service (Amazon ECS) through AWS console.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Go to AWS Management Console and select Elastic Container Service. From the left side navigation,\\nselect \", mdx(Link, {\n    to: \"https://us-west-2.console.aws.amazon.com/ecs/home?/taskDefinitions#/taskDefinitions\",\n    mdxType: \"Link\"\n  }, \"Task Definitions\"), \"\\nand click the Create new Task Definition button.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Select FARGATE or EC2 as the Launch type and move forward.\"))), mdx(\"img\", {\n    src: task_01,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Put a task-definition name (i.e.aws-otel). And select the role you create in pre section from Taskrole drop-down menu.\", mdx(\"img\", {\n    src: task2,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For the task execution role, select the role name you created by clicking Task execution role drop-down menu.\", mdx(\"img\", {\n    src: task3,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), \"Select Network Mode to `awsvpc`\", mdx(\"img\", {\n    src: task24,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Select the Task size:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For ECS FARGATE launch type (slected in step 2), Mention task memory and cpu for your task-definition (This example uses 1GB, 0.5 vCPU).\", mdx(\"img\", {\n    src: task4,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For ECS EC2 launch type (slected in step 2),  Mention task memory and task cpu  for your task-definition like use 2048 for memory, 1024 for CPU\", mdx(\"img\", {\n    src: task5,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }))), mdx(\"ol\", {\n    \"start\": 6\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the container definitions section, click the Add Container button. Let\\u2019s add the AWS Observability Collector container first.\\nPut a container name (i.e. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"aws-otel-collector\"), \") and use the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"amazon/aws-otel-collector\"), \" container image.\\nWe can keep everything else default\"), mdx(\"img\", {\n    src: task6,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), \"[Optional] In the 'Advanced container configuration' section, let's setup the HealthCheck instructions for aws-otel-collector. Provide the '/healthcheck' command and enter 5s as interval, 6s as Timeout, 1s as Start period, and 5 as Retries.\", mdx(\"img\", {\n    src: task_06,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set up the OpenTelemetry configuration file for AWS Observability Toolkit (AOT)\\nIn this section we will set the OpenTelemetry configuration file for our Collector container (ADOT Collector).  All the functionality\\nof AOC is passive, if your application doesn\\u2019t emit the data to the port (X-ray use UDP 2000, OTLP use TCP 4317 and 4318, StatsD use UDP 8125) then there will be no effect.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Collect Application Metrics and Traces:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the  Environment Command section add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--config=/etc/ecs/ecs-default-config.yaml\"), \" to select the ECS default configuration\\nfile for AWS Observability Collector (AOC). This will collect Application Metrics and Traces and send them to\\nAmazon CloudWatch Metrics and AWS X-Ray. Specifically, this configuration file can collect metrics and traces from\\nthe OpenTelemetry SDKs (OTLP), X-Ray traces from the X-Ray SDKs and StatsD metrics from your app.\"), mdx(\"img\", {\n    src: task7,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Collect Application Metrics & Traces and Container Resource Metrics\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the container definition section for   Environment Command section add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--config=/etc/ecs/container-insights/otel-task-metrics-config.yaml\"), \",\\nwhich is  already included as part of ADOT collector, select the ECS default configuration for Container Insights experience.\\nThis will collect Application Metrics, Traces  and task-level Container Resource Metrics, and send them to Amazon CloudWatch Metrics\\nand AWS X-Ray. This configuration file can collect metrics and traces from the OpenTelemetry SDKs (OTLP)\\n, X-Ray traces from the X-Ray SDKs and StatsD metrics from your app.\"), mdx(\"img\", {\n    src: task8,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Port mapping setup\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" For ECS Fargate launch type (slected in step 2), you can just skip this step.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For ECS EC2 launch type, add port mappings, map 2000 for udp (used by AWS X-ray for traces), 4317 for tcp (used by the collector) and 8125 for udp (used by StatsD).\"), mdx(\"img\", {\n    src: task9,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the STORAGE and LOGGING section, let\\u2019s enable Auto-configure CloudWatch logs.\"), mdx(\"img\", {\n    src: task10,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), \"We are done here. Keep other config options as they are. Finish adding the container.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Attention: 10, 11 and 12 will add three example applications to show how everything works. Normally, these images should be your business applications. Feel free to skip these steps.\"))), mdx(\"ol\", {\n    \"start\": 10\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Let\\u2019s add a sample application container in similar way (you can configure your application like this)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"10.1  You can select the container name you want (i.e. webapp ), but we use another image\\n(Image: 611364707713.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-otel-goxray-sample-app:v0.0.1). This image will\\ncreate a sample web application using Xray SDK to generate the trace data and send it to AWS Observability Collector (AOC).\", mdx(\"img\", {\n    src: task11,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"10.2  In the STARTUP DEPENDENCY ORDERING  select the Container name aws-otel-collector you used in step 6 and in the Condition, select START.\", mdx(\"img\", {\n    src: task20,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"10.3 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"If you selected FARGATE as your launch Type in step 2, you can just skip this step.  If you are using ECS EC2, do the following:\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add Port mappings, map port \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"8000\"), \" for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"tcp\"), \".\", mdx(\"img\", {\n    src: task12,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In Environment Section, add Environment variable: \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AWS_XRAY_DAEMON_ADDRESS\"), \" with \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"aws-otel-collector:2000\"), mdx(\"img\", {\n    src: task13,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the NETWORK SETTINGS Links, put the container name aws-otel-collector you used in step 6 as ADOT collector.\", mdx(\"img\", {\n    src: task14,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Keep the rest information as default and click add.\", mdx(\"img\", {\n    src: task15,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Let\\u2019s add another application container in similar way.\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For this example, we use the nginx (Image: nginx:latest).\", mdx(\"img\", {\n    src: task16,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the STARTUP DEPENDENCY ORDERING  select the Container name aws-otel-collector you used in step 6 and in the Condition, select START.\", mdx(\"img\", {\n    src: task17,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Keep the rest information as default and click add.\", mdx(\"img\", {\n    src: task18,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Let's add another application to send StatsD metrics (you can change this app with yours and send to port 8125).\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For this example, we use this alpine/socat:latest (Image: alpine/socat:latest).\", mdx(\"img\", {\n    src: task21,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add this part to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Entry point\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ENVIRONMENT\"), \" to send some StatsD metrics:\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/bin/sh,-c,while true; do echo 'statsdTestMetric:1|c' | socat -v -t 0 - UDP:127.0.0.1:8125; sleep 1; done\"), \"\\nHere is the output\", mdx(\"img\", {\n    src: task22,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the STARTUP DEPENDENCY ORDERING  select the Container name aws-otel-collector you used in step 6 and in the Condition, select START.\", mdx(\"img\", {\n    src: task17,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Keep the rest information as default and click add. Now you can see four containers\", mdx(\"img\", {\n    src: task23,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  })))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click the Create button in the bottom to finish the process. If everything works fine, you will see something like the following.\", mdx(\"img\", {\n    src: task19,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/docs/setup/ecs/create-task-definition-console/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/setup/ecs/create-task-definition-console.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}