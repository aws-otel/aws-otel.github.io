{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/java-sdk/manual-instr",
    "result": {"data":{"mdx":{"id":"6b99061a-32b7-59b0-a567-8d2a5b39f244","excerpt":"Introduction The OpenTelemetry Java SDK can be compiled into any Java 8+ application to gather telemetry data from a diverse\nset of libraries and frameworksâ€¦","fields":{"slug":"/docs/getting-started/java-sdk/manual-instr/"},"frontmatter":{"title":"Manual Instrumentation for Traces and Metrics with the Java SDK","description":"Learn how to get started with Java SDK for adding tracing to applications and libraries.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Manual Instrumentation for Traces and Metrics with the Java SDK\",\n  \"description\": \"Learn how to get started with Java SDK for adding tracing to applications and libraries.\",\n  \"path\": \"/docs/getting-started/java-sdk/manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"The OpenTelemetry Java SDK can be compiled into any Java 8+ application to gather telemetry data from a diverse\\nset of libraries and frameworks. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md\"\n  }, \"Library instrumentation\"), \"\\ncan be registered to quickly gather data on popular frameworks and the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java/tree/main/api/all\"\n  }, \"OpenTelemetry API\"), \"\\ncan be used to customize tracing for your application.\"), mdx(\"p\", null, \"For integration with X-Ray, OpenTelemetry provides extension modules for configuring the X-Ray ID generator,\\nX-Ray propagator, and AWS resource detectors.\"), mdx(\"p\", null, \"If you are using the Auto-Instrumentation Java Agent, refer to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/java-sdk/auto-instr\"\n  }, \"documentation on auto-instrumentation\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://adoptopenjdk.net/\"\n  }, \"Java 8 (or later)\"), \" is required to run an application using OpenTelemetry.\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the AWS Distro for OpenTelemetry (ADOT) Collector running to export traces to X-Ray.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"Several components provide the functionality for using OpenTelemetry SDK with X-Ray. You must use the OpenTelemetry BOM\\nto align dependency versions for non-contrib components.\"), mdx(\"h5\", {\n    \"id\": \"for-gradle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-gradle\",\n    \"aria-label\": \"for gradle permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Gradle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"dependencies {\\n    api(platform(\\\"io.opentelemetry:opentelemetry-bom:1.32.0\\\"))\\n\\n    implementation(\\\"io.opentelemetry:opentelemetry-api\\\")\\n    implementation(\\\"io.opentelemetry:opentelemetry-exporter-otlp\\\")\\n    implementation(\\\"io.opentelemetry:opentelemetry-sdk\\\")\\n\\n\\n    implementation(\\\"io.opentelemetry:opentelemetry-extension-aws\\\")\\n    implementation(\\\"io.opentelemetry:opentelemetry-sdk-extension-aws\\\")\\n    implementation(\\\"io.opentelemetry.contrib:opentelemetry-aws-xray:1.32.0\\\")\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"for-maven\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-maven\",\n    \"aria-label\": \"for maven permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Maven:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"<dependencyManagement>\\n  <dependencies>\\n    <dependency>\\n      <groupId>io.opentelemetry</groupId>\\n      <artifactId>opentelemetry-bom</artifactId>\\n      <version>1.32.0</version>\\n      <type>pom</type>\\n      <scope>import</scope>\\n    <dependency>\\n  </dependencies>\\n</dependencyManagement>\\n<dependencies>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-api</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-exporter-otlp</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-sdk</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-extension-aws</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-sdk-extension-aws</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry.contrib</groupId>\\n    <artifactId>opentelemetry-aws-xray</artifactId>\\n    <version>1.32.0</version>\\n  </dependency>\\n</dependencies>\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-up-the-sdk\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setting-up-the-sdk\",\n    \"aria-label\": \"setting up the sdk permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting up the SDK\"), mdx(\"h3\", {\n    \"id\": \"sending-traces-to-aws-x-ray\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sending-traces-to-aws-x-ray\",\n    \"aria-label\": \"sending traces to aws x ray permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sending Traces to AWS X-Ray\"), mdx(\"p\", null, \"Initialize the OpenTelemetry SDK with AWS components for exporting to X-Ray as follows.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"OpenTelemetrySdk.builder()\\n\\n        // This will enable your downstream requests to include the X-Ray trace header\\n        .setPropagators(\\n            ContextPropagators.create(\\n                TextMapPropagator.composite(\\n                    W3CTraceContextPropagator.getInstance(), AwsXrayPropagator.getInstance())))\\n\\n        // This provides basic configuration of a TracerProvider which generates X-Ray compliant IDs\\n        .setTracerProvider(\\n            SdkTracerProvider.builder()\\n                .addSpanProcessor(\\n                    BatchSpanProcessor.builder(OtlpGrpcSpanExporter.getDefault()).build())\\n                .setIdGenerator(AwsXrayIdGenerator.getInstance())\\n                .build())\\n        .buildAndRegisterGlobal();\\n\")), mdx(\"h3\", {\n    \"id\": \"using-the-aws-resource-detectors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-the-aws-resource-detectors\",\n    \"aria-label\": \"using the aws resource detectors permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using the AWS resource detectors\"), mdx(\"p\", null, \"AWS resource detectors for enriching traces with AWS infrastructure information is available in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-sdk-extension-aws\"), \"\\nartifact.\"), mdx(\"h5\", {\n    \"id\": \"for-gradle-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-gradle-1\",\n    \"aria-label\": \"for gradle 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Gradle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"dependencies {\\n    implementation(\\\"io.opentelemetry:opentelemetry-sdk-extension-aws\\\")\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"for-maven-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-maven-1\",\n    \"aria-label\": \"for maven 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Maven:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"<dependencies>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-sdk-extension-aws</artifactId>\\n  </dependency>\\n</dependencies>\\n\")), mdx(\"p\", null, \"Register the detectors you would like to use when initializing the SDK.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"OpenTelemetrySdk.builder()\\n        ...\\n        .setTracerProvider(\\n            SdkTracerProvider.builder()\\n                ...\\n                .setResource(\\n                    Resource.getDefault()\\n                        .merge(BeanstalkResource.get())\\n                        .merge(Ec2Resource.get())\\n                        .merge(EcsResource.get()\\n                        .merge(EksResource.get())))\\n                .build())\\n        .buildAndRegisterGlobal();\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-support-for-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adding-support-for-metrics\",\n    \"aria-label\": \"adding support for metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Adding support for Metrics\"), mdx(\"p\", null, \"The API and SDK for Metrics became stable in v1.15.0 of OpenTelemetry for Java.\\nThe following piece of code initialize the OpenTelemetry SDK to use Metrics and Traces.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"MetricReader metricReader = PeriodicMetricReader.builder(\\n        OtlpGrpcMetricExporter.getDefault())\\n        .build();\\nOpenTelemetry opentelemetry = OpenTelemetrySdk.builder()\\n        // Traces configuration\\n        .setPropagators(\\n            ContextPropagators.create(\\n                TextMapPropagator.composite(\\n                    W3CTraceContextPropagator.getInstance(), AwsXrayPropagator.getInstance())))\\n\\n        .setTracerProvider(\\n            SdkTracerProvider.builder()\\n                .addSpanProcessor(\\n                    BatchSpanProcessor.builder(OtlpGrpcSpanExporter.getDefault()).build())\\n                .setIdGenerator(AwsXrayIdGenerator.getInstance())\\n                .build()\\n        // Metrics Configuration\\n        .setMeterProvider(\\n                SdkMeterProvider.builder()\\n                        .registerMetricReader(metricReader)\\n                        .build())\\n        .buildAndRegisterGlobal();\\n\")), mdx(\"h3\", {\n    \"id\": \"debug-logging\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#debug-logging\",\n    \"aria-label\": \"debug logging permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Debug Logging\"), mdx(\"p\", null, \"The SDK uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.util.logging\"), \" to log messages at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FINE\"), \" level - logging frameworks like Logback or Log4J map this to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"debug\"), \" level. To view debug statements, configure your logging framework to output \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.opentelemetry\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"debug\"), \" level.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-an-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#instrumenting-an-application\",\n    \"aria-label\": \"instrumenting an application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting an application\"), mdx(\"p\", null, \"OpenTelemetry provides a wide range of instrumentations for popular Java libraries such as Spring, gRPC, OkHttp,\\nand JDBC. Instrumenting a library means that every time the library is used to make or handle a request is automatically\\nwrapped with a populated span.\"), mdx(\"p\", null, \"View the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md\"\n  }, \"full list of instrumented libraries\"), \".\"), mdx(\"p\", null, \"Note that library instrumentation is currently \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alpha\"), \" and some APIs may change before a stable release. You must use\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha\"), \" BOM to manage versions when adding\\nlibrary instrumentation. When using this, do not include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-bom\"), \".\"), mdx(\"h5\", {\n    \"id\": \"for-gradle-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-gradle-2\",\n    \"aria-label\": \"for gradle 2 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Gradle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"dependencies {\\n    api(platform(\\\"io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:2.11.4-alpha\\\"))\\n\\n    implementation(\\\"io.opentelemetry:opentelemetry-api\\\")\\n    implementation(\\\"io.opentelemetry:opentelemetry-exporter-otlp\\\")\\n    implementation(\\\"io.opentelemetry:opentelemetry-sdk\\\")\\n\\n    implementation(\\\"io.opentelemetry.instrumentation:opentelemetry-instrumentation-<framework>\\\")\\n\\n    ...\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"for-maven-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-maven-2\",\n    \"aria-label\": \"for maven 2 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Maven:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"<dependencyManagement>\\n  <dependencies>\\n    <dependency>\\n      <groupId>io.opentelemetry.instrumentation</groupId>\\n      <artifactId>opentelemetry-instrumentation-bom-alpha</artifactId>\\n      <version>2.11.4-alpha</version>\\n      <type>pom</type>\\n      <scope>import</scope>\\n    <dependency>\\n  </dependencies>\\n</dependencyManagement>\\n<dependencies>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-api</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-exporter-otlp</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-sdk</artifactId>\\n  </dependency>\\n  <dependency>\\n    <groupId>io.opentelemetry.instrumentation</groupId>\\n    <artifactId>opentelemetry-instrumentation-<framework></artifactId>\\n  </dependency>\\n  ...\\n</dependencies>\\n\")), mdx(\"h3\", {\n    \"id\": \"instrumenting-the-aws-sdk\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#instrumenting-the-aws-sdk\",\n    \"aria-label\": \"instrumenting the aws sdk permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting the AWS SDK\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-instrumentation-aws-sdk-2.2\"), \" artifact provides instrumentation for the AWS SDK v2.\"), mdx(\"h5\", {\n    \"id\": \"for-gradle-3\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-gradle-3\",\n    \"aria-label\": \"for gradle 3 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Gradle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"dependencies {\\n    api(platform(\\\"io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:2.11.4-alpha\\\"))\\\\\\n\\n    implementation(\\\"io.opentelemetry.instrumentation:opentelemetry-aws-sdk-2.2\\\")\\n\\n    ...\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"for-maven-3\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-maven-3\",\n    \"aria-label\": \"for maven 3 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Maven:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"<dependencyManagement>\\n  <dependencies>\\n    <dependency>\\n      <groupId>io.opentelemetry.instrumentation</groupId>\\n      <artifactId>opentelemetry-instrumentation-bom-alpha</artifactId>\\n      <version>2.11.4-alpha</version>\\n      <type>pom</type>\\n      <scope>import</scope>\\n    <dependency>\\n  </dependencies>\\n</dependencyManagement>\\n<dependencies>\\n  <dependency>\\n    <groupId>io.opentelemetry.instrumentation</groupId>\\n    <artifactId>opentelemetry-instrumentation-aws-sdk-2.2</artifactId>\\n  </dependency>\\n  ...\\n</dependencies>\\n\")), mdx(\"p\", null, \"And when initializing an AWS SDK, add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExecutionInterceptor\"), \" which enables tracing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"DynamoDbClient.builder()\\n  .overrideConfiguration(ClientOverrideConfiguration.builder()\\n    .addExecutionInterceptor(AwsSdkTracing.create(openTelemetry).newExecutionInterceptor())\\n    .build())\\n  .build();\\n\")), mdx(\"p\", null, \"This will enable tracing for all DynamoDB calls using this client.\"), mdx(\"h3\", {\n    \"id\": \"using-x-ray-remote-sampling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-x-ray-remote-sampling\",\n    \"aria-label\": \"using x ray remote sampling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using X-Ray Remote Sampling\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-aws-xray\"), \" artifact provides a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sampler\"), \" implementation for use with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-sampling.html\"\n  }, \"X-Ray remote sampling\"), \".\"), mdx(\"p\", null, \"When initializing the OpenTelemetry SDK, register the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AwsXrayRemoteSampler\"), \". Moreover, You can configure the following attributes.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Attribute\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Type\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Description\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Default\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"pollingInterval\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Duration\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Duration between polling the GetSamplingRules API\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"5 minutes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"endpoint\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Endpoint used to communicate with the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"awsproxy\"), \" collector extension\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"http://localhost:2000\"))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"Resource resource = Resource.builder()\\n  ...\\n  .build();\\n\\nOpenTelemetrySdk.builder()\\n  .setTracerProvider(SdkTracerProvider.builder()\\n    .setResource(resource)\\n    .setSampler(AwsXrayRemoteSampler.newBuilder(resource).setEndpoint(\\\"http://localhost:2000\\\")\\n                                                                      .setPollingInterval(Duration.ofSeconds(300))\\n                                                                      .build())\\n    ...\\n    .build())\\n  .build();\\n\")), mdx(\"p\", null, \"You will also need to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/remote-sampling\"\n  }, \"configure the OpenTelemetry collector\"), \"\\nto allow the application to fetch sampling configuration.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-instrumentation\",\n    \"aria-label\": \"custom instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom Instrumentation\"), mdx(\"h3\", {\n    \"id\": \"creating-custom-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-custom-spans\",\n    \"aria-label\": \"creating custom spans permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Custom Spans\"), mdx(\"p\", null, \"You can use custom spans to monitor the performance of internal activities that are not captured by instrumentation\\nlibraries. Note that only spans of kind \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Server\"), \" are converted into X-Ray segments, all other spans are converted into\\nX-Ray subsegments. For more on segments and subsegments, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-segments\"\n  }, \"AWS X-Ray developer guide\"), \".\"), mdx(\"p\", null, \"First, create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tracer\"), \" to associate with generated spans. It is common to have one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tracer\"), \" for the entire application,\\noften available via dependency injection.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Tracer tracer = openTelemetry.getTracer(\\\"my-app\\\");\\n\")), mdx(\"p\", null, \"Then to create spans:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// SERVER span will become an X-Ray segment\\nSpan span = tracer.spanBuilder(\\\"get-token\\\")\\n  .setKind(SpanKind.SERVER)\\n  .setAttribute(USER_ID, \\\"user\\\")\\n  .startSpan();\\ntry (Scope ignored = span.makeCurrent()) {\\n  doGetToken();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// Default span of type INTERNAL will become an X-Ray subsegment\\nSpan span = tracer.spanBuilder(\\\"process-header\\\")\\n  .startSpan();\\ntry (Scope ignored = span.makeCurrent()) {\\n  doProcessHeader();\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Adding custom attributes\"), mdx(\"p\", null, \"You can also add custom key-value pairs as attributes onto your spans. Attributes are converted to metadata by default.\\nIf you \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/7bf2266a025425993a233f66c77a0810ab11a78b/exporter/awsxrayexporter#exporter-configuration\"\n  }, \"configure your collector\"), \",\\nyou can convert some or all of the attributes to annotations. To read more about X-Ray annotations and metadata see the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-annotations\"\n  }, \"AWS X-Ray Developer Guide\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"class RequestHandler {\\n  // Not storing AttributeKey as a constant will result in significantly degraded performance.\\n  private static final AttributeKey<String> USER_ID_KEY = AttributeKey.stringKey(\\\"user.id\\\");\\n\\n  Response handle(Request request) {\\n    // Library instrumentation, for example for Spring, has already created a span for this request. We access it with\\n    // Span.current() and can add any attributes we define ourselves.\\n    Span.current().setAttribute(USER_ID_KEY, request.getUserId());\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"creating-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-metrics\",\n    \"aria-label\": \"creating metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Metrics\"), mdx(\"p\", null, \"Similarly to Traces, you can create custom metrics in your application using the OpenTelemetry API and SDK.\"), mdx(\"p\", null, \"In the following example application we demonstrate how to use the three types of metric instruments that\\nare available to record metrics: Counters, Gauges and Histograms.\"), mdx(\"p\", null, \"The theoretic application being depicted is a worker that process messages from 2 different queues.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/reference/specification/metrics/api/#counter\"\n  }, \"Counters\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Meter meter = opentelemetry.getMeter(\\\"consumer-application\\\");\\n\\nLongCounter counter = meter.counterBuilder(\\\"messages_consumed\\\")\\n        .setDescription(\\\"Number of messages consumed\\\")\\n        .setUnit(\\\"n\\\")\\n        .build();\\n\\nAttributes attributes1 = Attributes.of(AttributeKey.stringKey(\\\"processing_place\\\"), \\\"Place1\\\");\\nAttributes attributes2 = Attributes.of(AttributeKey.stringKey(\\\"processing_place\\\"), \\\"Place2\\\");\\n\\n// Counters can be synchronous\\ncounter.record(getProcessedMessagesQueue1(), attributes1);\\n\\n// Different attributes can be associated with the value\\ncounter.record(getProcessedMessagesQueue2(), attributes2);\\n\\n// Counters also have the asynchronous form\\nLongCounter messagesDroppedCounter = meter.counterBuilder(\\\"messages_dropped\\\")\\n        .setDescription(\\\"Number of messages dropped\\\")\\n        .buildWithCallback( (consumer) -> consumer.record(getTotalMessagesDropped()));\\n\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/reference/specification/metrics/api/#asynchronous-gauge\"\n  }, \"Gauges\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Meter meter = opentelemetry.getMeter(\\\"consumer-application\\\");\\n\\nAttributes attributes1 = Attributes.of(AttributeKey.stringKey(\\\"queue_name\\\"), \\\"Queue1\\\");\\nAttributes attributes2 = Attributes.of(AttributeKey.stringKey(\\\"queue_name\\\"), \\\"Queue2\\\");\\n\\nGauge gauge = meter\\n    .gaugeBuilder(\\\"consumer_queue_size\\\")\\n    .setDescription(\\\"The size of the queue that is being consumed\\\")\\n    .setUnit(\\\"1\\\")\\n    .ofLongs()\\n    // Gauges are asynchronous\\n    .buildWithCallback(\\n        measurement -> {\\n          measurement.record(getQueueSize1(), attributes1);\\n          measurement.record(getQueueSize2(), attributes2);\\n        });\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/reference/specification/metrics/api/#histogram\"\n  }, \"Histograms\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Meter meter = opentelemetry.getMeter(\\\"consumer-application\\\");\\n\\n// Histograms metric data points convey a population of recorded measurements in a compressed format.\\n// A histogram bundles a set of events into divided populations with an overall event count and aggregate sum for all events.\\n// Histograms are useful to record measurements such as latency. With histograms we can extract the min, max and percentiles.\\nLongHistogram histogram = meter.histogramBuilder(\\\"processing_time\\\")\\n      .setUnit(\\\"ms\\\")\\n      .setDescription(\\\"Amount of time it takes to process a message\\\")\\n      .ofLongs()\\n      .build();\\n\\nhistogram.record(messageProcessingTime)\\n\\n\")), mdx(\"p\", null, \"There are more examples in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/instrumentation/java/manual/#metrics\"\n  }, \"OpenTelemetry Java Manual\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":5,"value":"For Gradle:"},{"depth":5,"value":"For Maven:"},{"depth":2,"value":"Setting up the SDK"},{"depth":3,"value":"Sending Traces to AWS X-Ray"},{"depth":3,"value":"Using the AWS resource detectors"},{"depth":5,"value":"For Gradle:"},{"depth":5,"value":"For Maven:"},{"depth":3,"value":"Adding support for Metrics"},{"depth":3,"value":"Debug Logging"},{"depth":2,"value":"Instrumenting an application"},{"depth":5,"value":"For Gradle:"},{"depth":5,"value":"For Maven:"},{"depth":3,"value":"Instrumenting the AWS SDK"},{"depth":5,"value":"For Gradle:"},{"depth":5,"value":"For Maven:"},{"depth":3,"value":"Using X-Ray Remote Sampling"},{"depth":2,"value":"Custom Instrumentation"},{"depth":3,"value":"Creating Custom Spans"},{"depth":3,"value":"Adding custom attributes"},{"depth":3,"value":"Creating Metrics"}]}},"pageContext":{"slug":"/docs/getting-started/java-sdk/manual-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/java-sdk/manual-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}