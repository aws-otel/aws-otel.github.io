{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/java-sdk/auto-instr",
    "result": {"data":{"mdx":{"id":"659d3b26-e99f-5e65-b1ce-be7d47555ee1","excerpt":"Introduction The AWS Distro for OpenTelemetry (ADOT) Java Auto-Instrumentation Agent can be attached to any Java 8+ application to gather\ntelemetry data from aâ€¦","fields":{"slug":"/docs/getting-started/java-sdk/auto-instr/"},"frontmatter":{"title":"Auto-Instrumentation for Traces and Metrics with the Java agent","description":"Learn how to get started with Java Auto-Instrumentation Agent. This package includes the instrumentation agent, instrumentations for all supported libraries and all available data exporters, providing a complete out of the box experience for tracing and metrics on AWS. The agent is preconfigured to generate trace IDs compatible with AWS X-Ray, which will also work with any other tracing system, and enables trace propagation using W3C Trace Context, B3, and X-Ray.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Auto-Instrumentation for Traces and Metrics with the Java agent\",\n  \"description\": \"Learn how to get started with Java Auto-Instrumentation Agent. This package includes the instrumentation agent, instrumentations for all supported libraries and all available data exporters, providing a complete out of the box experience for tracing and metrics on AWS. The agent is preconfigured to generate trace IDs compatible with AWS X-Ray, which will also work with any other tracing system, and enables trace propagation using W3C Trace Context, B3, and X-Ray.\",\n  \"path\": \"/docs/getting-started/java-sdk/auto-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"The AWS Distro for OpenTelemetry (ADOT) Java Auto-Instrumentation Agent can be attached to any Java 8+ application to gather\\ntelemetry data from a diverse set of libraries and frameworks. The agent will automatically transform code at startup\\nto collect tracing data. It is preconfigured for compatibility with X-Ray and AWS services but can also be used with any\\nother tracing backend. Out of the box, it propagates traces using all of W3C Trace Context, B3, and X-Amzn-Trace-Id.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://adoptopenjdk.net/\"\n  }, \"Java 8 (or later)\"), \" is required to run an application using OpenTelemetry.\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\"), \" running to export traces to X-Ray.\"), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"Download the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-java-instrumentation/releases/latest/download/aws-opentelemetry-agent.jar\"\n  }, \"latest version\"), \".\"), mdx(\"p\", null, \"If you'd prefer to pin to a specific version, check out our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-java-instrumentation/releases\"\n  }, \"releases\"), \".\"), mdx(\"p\", null, \"The ADOT Java Agent is also published in the following maven coordinates:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"dependencies {\\n    implementation(\\\"software.amazon.opentelemetry:aws-opentelemetry-agent:2.11.4\\\")\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"<dependencies>\\n  <dependency>\\n      <groupId>software.amazon.opentelemetry</groupId>\\n      <artifactId>aws-opentelemetry-agent</artifactId>\\n      <version>2.11.4</version>\\n  </dependency>\\n</dependencies>\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"running-an-application-with-auto-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#running-an-application-with-auto-instrumentation\",\n    \"aria-label\": \"running an application with auto instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Running an Application with Auto-Instrumentation\"), mdx(\"p\", null, \"To run your app with the agent, specify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-javaagent\"), \" flag when starting up your application,\\npointing to the downloaded agent Java Archive (JAR) artifact. In addition, while not required by the agent itself,\\nalmost all tracing systems require a service name and service namespace defined to identify your application, which you can specify\\nwith the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_RESOURCE_ATTRIBUTES\"), \" environment variable and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service.name\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service.namespace\"), \" attribute keys.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OTEL_RESOURCE_ATTRIBUTES=service.name=MyApp,service.namespace=MyTeam java -javaagent:path/to/aws-opentelemetry-agent.jar -jar myapp.jar\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Like normal system properties, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-javaagent\"), \" flag must come before -jar or your main class name.\"), mdx(\"p\", null, \"The above command will start up your app with the agent activated, and instrumentation is then activated\\nautomatically. For many cases, this is all you need to use tracing.\"), mdx(\"h3\", {\n    \"id\": \"configuring-auto-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#configuring-auto-instrumentation\",\n    \"aria-label\": \"configuring auto instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configuring Auto-Instrumentation\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Skip this part if you are onboarding with CloudWatch Application Signals.\"), mdx(\"p\", null, \"By default OpenTelemetry Java agent uses the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp\"\n  }, \"OTLP exporter\"), \"\\nand is configured to send data to a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector/blob/master/receiver/otlpreceiver/README.md\"\n  }, \"OpenTelemetry collector\"), \"\\nat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4317\"), \" for both metrics and traces.\"), mdx(\"p\", null, \"The agent can be configured using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md\"\n  }, \"standard OpenTelemetry options for configuration\"), \" using either environment variables or system properties.\\nFor example, to set the random sampling rate for creating traces, you can set the environment variables\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER=parentbased_traceidratio\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=0.3\"), \" to configure a sampling rate of 30%.\"), mdx(\"p\", null, \"Another useful configuration that can be used during development is to log traces and metrics. This can be achieved by\\nsetting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_EXPORTER=logging\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_METRICS_EXPORTER=logging\"), \".\"), mdx(\"h3\", {\n    \"id\": \"using-cloudwatch-application-signals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-cloudwatch-application-signals\",\n    \"aria-label\": \"using cloudwatch application signals permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using CloudWatch Application Signals\"), mdx(\"p\", null, \"You can use CloudWatch Application Signals to automatically instrument your applications on AWS using ADOT Java auto-instrumentation so that you can monitor current application health and track long-term application performance against your business objectives. Application Signals provides you with a unified, application-centric view of your applications, services, and dependencies, and helps you monitor and triage application health.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\"\n  }, \"Get started with CloudWatch Application Signals\")), mdx(\"h3\", {\n    \"id\": \"using-x-ray-remote-sampling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-x-ray-remote-sampling\",\n    \"aria-label\": \"using x ray remote sampling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using X-Ray Remote Sampling\"), mdx(\"p\", null, \"The ADOT Java Auto-Instrumentation can be configured to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-sampling.html\"\n  }, \"X-Ray remote sampling\"), \"\\nby setting the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER=xray\"), \". You will also need to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/remote-sampling\"\n  }, \"configure the OpenTelemetry collector\"), \"\\nto allow the application to fetch sampling configuration. \"), mdx(\"p\", null, \"You can further configure the Sampler by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG\"), \" environment variable. You can update the endpoint and the polling rate as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=endpoint=<ENDPOINT>,polling_interval=<INTERVAL_IN_SECS>\\n\")), mdx(\"p\", null, \"By default the sampler sends requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:2000\"), \" and has a polling rate of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"300 seconds\"), \". By setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG\"), \"\\nenvironment variable you can change the endpoint the sampler talks with when getting sampling configuration from AWS X-Ray Console. For example setting\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=endpoint=http://localhost:4000,polling_interval=60\"), \" would configure the sampler to communicate with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4000\"), \" and poll the sampling rules every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"60 seconds\"), \".\"), mdx(\"h3\", {\n    \"id\": \"running-the-agent-in-docker\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#running-the-agent-in-docker\",\n    \"aria-label\": \"running the agent in docker permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Running the agent in Docker\"), mdx(\"p\", null, \"If your application is packaged in Docker, the easiest way to run with the agent is to use the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAVA_TOOL_OPTIONS\"), \" environment variable, which automatically sets flags for Java. Adding this\\nsnippet to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" will typically be enough to enable tracing, although if you already set\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAVA_TOOL_OPTIONS\"), \", don't forget to make sure to add to your existing setting rather than replacing it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ADD https://github.com/aws-observability/aws-otel-java-instrumentation/releases/latest/download/aws-opentelemetry-agent.jar /opt/aws-opentelemetry-agent.jar\\nENV JAVA_TOOL_OPTIONS=-javaagent:/opt/aws-opentelemetry-agent.jar\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-manual-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-manual-instrumentation\",\n    \"aria-label\": \"using manual instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using Manual Instrumentation\"), mdx(\"p\", null, \"While the Java agent provides automatic instrumentation for popular frameworks, you might find the need\\nto perform instrumentation in your application, for example, to provide custom data or to instrument\\ncode within the application itself.\"), mdx(\"p\", null, \"To perform manual instrumentation alongside the agent, you only need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-api\"), \" aritfact. The\\nversion of this artifact can not be newer than the version of the agent. Notably, you do not need the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-sdk\"), \"\\nartifact, any usage of it will be disabled by the agent.\"), mdx(\"h5\", {\n    \"id\": \"for-gradle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-gradle\",\n    \"aria-label\": \"for gradle permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Gradle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"dependencies {\\n    implementation(\\\"io.opentelemetry:opentelemetry-api:1.32.0\\\")\\n}\\n\")), mdx(\"h5\", {\n    \"id\": \"for-maven\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#for-maven\",\n    \"aria-label\": \"for maven permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"For Maven:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"<dependencies>\\n  <dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-api</artifactId>\\n    <version>1.32.0</version>\\n  </dependency>\\n</dependencies>\\n\")), mdx(\"p\", null, \"See the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/java-sdk/trace-manual-instr#custom-instrumentation\"\n  }, \"document on manual instrumentation\"), \"\\nfor more detail on using the OpenTelemetry API.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-applications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sample-applications\",\n    \"aria-label\": \"sample applications permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sample Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Visit the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://catalog.us-east-1.prod.workshops.aws/workshops/31676d37-bbe9-4992-9cd1-ceae13c5116c/en-US/aws-managed-oss/adot/javawalkthrough\"\n  }, \"Sample Spring App using OpenTelemetry Java Auto-Instrumentation\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-java-instrumentation/tree/main/sample-apps/spark\"\n  }, \"SparkJava Sample Application Using Traces and Metrics\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Running an Application with Auto-Instrumentation"},{"depth":3,"value":"Configuring Auto-Instrumentation"},{"depth":3,"value":"Using CloudWatch Application Signals"},{"depth":3,"value":"Using X-Ray Remote Sampling"},{"depth":3,"value":"Running the agent in Docker"},{"depth":2,"value":"Using Manual Instrumentation"},{"depth":5,"value":"For Gradle:"},{"depth":5,"value":"For Maven:"},{"depth":2,"value":"Sample Applications"}]}},"pageContext":{"slug":"/docs/getting-started/java-sdk/auto-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/java-sdk/auto-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}