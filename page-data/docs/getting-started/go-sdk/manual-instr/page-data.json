{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/go-sdk/manual-instr",
    "result": {"data":{"mdx":{"id":"d051680d-a766-5b21-a0e5-dd94d0f2ab13","excerpt":"Introduction Welcome to the AWS Distro for OpenTelemetry (ADOT) Go getting started guide. This walk-through covers the ADOT Go components, how to\nconfigure theâ€¦","fields":{"slug":"/docs/getting-started/go-sdk/manual-instr/"},"frontmatter":{"title":"Using the AWS Distro for OpenTelemetry Go SDK","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Go SDK for traces and metrics instrumentation in the application.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Using the AWS Distro for OpenTelemetry Go SDK\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Go SDK for traces and metrics instrumentation in the application.\",\n  \"path\": \"/docs/getting-started/go-sdk/manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"Welcome to the AWS Distro for OpenTelemetry (ADOT) Go getting started guide. This walk-through covers the ADOT Go components, how to\\nconfigure the ADOT components to capture traces and metrics with OpenTelemetry Go, as well as how to use the AWS Elastic Container Service\\n(AWS ECS) and AWS Elastic Kubernetes Service (AWS EKS) resource detectors. Before reading this guide, you should familiarize with\\ndistributed tracing/metrics and the basics of OpenTelemetry. To learn more about getting started with OpenTelemetry Go, see the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/languages/go/\"\n  }, \"OpenTelemetry developer documentation\"), \".\"), mdx(\"img\", {\n    src: goImg1,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, \"Go \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v1.19\"), \" or later is required to run an application using OpenTelemetry. Visit the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-go#compatibility\"\n  }, \"compatibility chart\"), \" of OpenTelemetry Go SDK with different \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OS\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Go Version\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Architecture\"), \".\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\"), \" running to export traces and metrics.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"Download and install the following packages to use ADOT Components with OpenTelemetry Go SDK for tracing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"1. X-Ray ID Generator\\n2. X-Ray propagator\\n3. OTel Go SDK for tracing\\n4. OTel Go API for tracing\\n5. OTLP gRPC exporter for exporting trace data\\n6. OTel Go SDK for metrics\\n7. OTel Go API for metrics\\n8. OTLP gRPC exporter for exporting metric data\\n\")), mdx(\"p\", null, \"To install the above mentioned necessary prerequisites, run the following command in the same directory that the application \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go.mod\"), \" file is in:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"go get go.opentelemetry.io/contrib/propagators/aws/xray\\ngo get go.opentelemetry.io/otel\\ngo get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\ngo get go.opentelemetry.io/otel/sdk/resource\\ngo get go.opentelemetry.io/otel/sdk/trace\\ngo get go.opentelemetry.io/otel/sdk/metric\\ngo get go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-up-the-global-tracer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setting-up-the-global-tracer\",\n    \"aria-label\": \"setting up the global tracer permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting up the Global Tracer\"), mdx(\"h3\", {\n    \"id\": \"sending-traces\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sending-traces\",\n    \"aria-label\": \"sending traces permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sending Traces\"), mdx(\"p\", null, \"This section talks about how to instantiate a new tracer provider with the X-Ray ID generator and sampling config, setting global options (X-Ray propagator, tracer provider) and instantiate OTLP exporter with the collector's address to export trace data.\"), mdx(\"h4\", {\n    \"id\": \"creating-an-opentelemetry-protocol-otlp-exporter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#creating-an-opentelemetry-protocol-otlp-exporter\",\n    \"aria-label\": \"creating an opentelemetry protocol otlp exporter permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating an OpenTelemetry Protocol (OTLP) Exporter\"), mdx(\"img\", {\n    src: goImg2,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"OpenTelemetry Go requires an exporter to send traces to a backend. Exporters allow telemetry data to be transferred either to the AWS Distro for OpenTelemetry Collector (ADOT Collector), or to a remote system or console for further analysis. The ADOT Collector is a separate process that is designed to be a \\\"sink\\\" for telemetry data emitted by many processes, which can then export\\nthat data to various back-end systems.\"), mdx(\"p\", null, \"To initialize the OTLP trace exporter, add the following code to the file the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IMPORTANT\"), \": The following examples creates an OTLP exporter that does not encrypt data at transfer because it uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlptracegrpc.WithInsecure()\"), \" option. This should only be used for creating proof of concepts and experimenting with the Go SDK.\\nFor production environments you must properly configure TLS using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlptracegrpc.WithTLSCredentials\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"// Create and start new OTLP trace exporter\\ntraceExporter, err := otlptracegrpc.New(ctx, otlptracegrpc.WithInsecure(), otlptracegrpc.WithEndpoint(\\\"0.0.0.0:4317\\\"), otlptracegrpc.WithDialOption(grpc.WithBlock()))\\nif err != nil {\\n    log.Fatalf(\\\"failed to create new OTLP trace exporter: %v\\\", err)\\n}\\n\")), mdx(\"p\", null, \"This creates a new OTLP exporter with a few options - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WithInsecure()\"), \" disables client transport security for the exporter's gRPC connection, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WithEndpoint()\"), \" allows you to set the address that the exporter will connect to the Collector on. If the address is unset, it will instead try to use connect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:4317\"), \". If the Collector you are connecting uses TLS, for example in a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/collector/sidecar-vs-service\"\n  }, \"service deployment\"), \",\\npass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlptracegrpc.WithTLSCredentials()\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlptracegrpc.WithInsecure()\"), \".\"), mdx(\"h4\", {\n    \"id\": \"creating-a-tracer-provider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#creating-a-tracer-provider\",\n    \"aria-label\": \"creating a tracer provider permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating a Tracer Provider\"), mdx(\"p\", null, \"In order to generate traces, OpenTelemetry Go SDK requires a tracer provider to be created. A tracer provider can have multiple different span processors, which are components that give the ability to modify and export span data after it has been created.\"), mdx(\"p\", null, \"To create a new tracer provider, add the following lines to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"idg := xray.NewIDGenerator()\\n\\ntp := trace.NewTracerProvider(\\n    trace.WithSampler(trace.AlwaysSample()),\\n    trace.WithBatcher(traceExporter),\\n    trace.WithIDGenerator(idg),\\n)\\n\")), mdx(\"p\", null, \"Above block of code creates a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" with a Sampler that samples every trace, and an ID Generator that will generate trace IDs that conform to AWS X-Ray\\u2019s format, as well as register the OLTP exporter we created in the previous section.\"), mdx(\"h4\", {\n    \"id\": \"setting-global-options\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#setting-global-options\",\n    \"aria-label\": \"setting global options permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting Global Options\"), mdx(\"p\", null, \"In addition to setting a global tracer provider, we will also configure the context propagation option. Context propagation refers to sharing data across multiple processes or services. Propagator structs are configured inside Tracer structs to support context propagation across process boundaries. A context will often have information\\nidentifying the current span and trace, and can contain arbitrary information as key-value pairs.\"), mdx(\"p\", null, \"To set up global options, we will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otel\"), \" package and add the following lines to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"otel.SetTracerProvider(tp)\\notel.SetTextMapPropagator(xray.Propagator{})\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"using-the-aws-resource-detectors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-the-aws-resource-detectors\",\n    \"aria-label\": \"using the aws resource detectors permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using the AWS resource Detectors\"), mdx(\"p\", null, \"OpenTelemetry Go SDK has Amazon EC2, ECS and EKS resource detector support. The resource detectors are responsible for detecting whether a Go application instrumented with OpenTelemetry is running on the respective environment, and populating resource attributes for that environment if available. If the resource detector detects that the application\\nis not running on an environment (EC2, ECS or EKS), then it will return an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" struct.\"), mdx(\"img\", {\n    src: goImg5,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go get go.opentelemetry.io/contrib/detectors/aws/ec2\"), \" command to import the EC2 resource detector module. The following code snippet demonstrates how to use the EC2 resource detector. Visit OpenTelemetry AWS Resource Detectors \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/detectors/aws/README.md\"\n  }, \"README\"), \" to get more information on which environment attributes are being captured by resource detectors.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"// Instantiate a new EC2 Resource detector\\nec2ResourceDetector := ec2.NewResourceDetector()\\nresource, err := ec2ResourceDetector.Detect(context.Background())\\n\\n// Associate resource with TracerProvider\\ntracerProvider := trace.NewTracerProvider(\\n    trace.WithResource(resource),\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"setting-up-the-global-meter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setting-up-the-global-meter\",\n    \"aria-label\": \"setting up the global meter permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting up the Global Meter\"), mdx(\"h3\", {\n    \"id\": \"sending-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sending-metrics\",\n    \"aria-label\": \"sending metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sending metrics\"), mdx(\"p\", null, \"This section talks about how to instantiate a new meter provider , setting global options (meter provider) and instantiate OTLP exporter with the collector's address to export metric data.\"), mdx(\"h4\", {\n    \"id\": \"creating-an-opentelemetry-protocol-otlp-exporter-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#creating-an-opentelemetry-protocol-otlp-exporter-1\",\n    \"aria-label\": \"creating an opentelemetry protocol otlp exporter 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating an OpenTelemetry Protocol (OTLP) Exporter\"), mdx(\"p\", null, \"OpenTelemetry Go requires an exporter to send metrics to a backend. Exporters allow telemetry data to be transferred either to the AWS Distro for OpenTelemetry Collector (ADOT Collector), or to a remote system or console for further analysis. The ADOT Collector is a separate process that is designed to be a \\\"sink\\\" for telemetry data emitted by many processes, which can then export\\nthat data to various back-end systems.\"), mdx(\"p\", null, \"To initialize the OTLP metric exporter, add the following code to the file the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IMPORTANT\"), \": The following examples creates an OTLP exporter that does not encrypt data at transfer because it uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlpmetricgrpc.WithInsecure()\"), \" option. This should only be used for creating proof of concepts and experimenting with the Go SDK.\\nFor production environments you must properly configure TLS using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlpmetricgrpc.WithTLSCredentials\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"// Create and start new OTLP metric exporter\\nmetricExporter, err := otlpmetricgrpc.New(ctx, otlpmetricgrpc.WithInsecure(), otlpmetricgrpc.WithEndpoint(\\\"0.0.0.0:4317\\\"), otlpmetricgrpc.WithDialOption(grpc.WithBlock()))\\nif err != nil {\\n    log.Fatalf(\\\"failed to create new OTLP metric exporter: %v\\\", err)\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"creating-a-meter-provider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#creating-a-meter-provider\",\n    \"aria-label\": \"creating a meter provider permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating a Meter Provider\"), mdx(\"p\", null, \"In order to generate metrics, OpenTelemetry Go SDK requires a meter provider to be created.  The meter provider is configured with a periodic reader in this example.\"), mdx(\"p\", null, \"To create a new meter provider, add the following lines to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"mp := metric.NewMeterProvider(metric.WithReader(metric.NewPeriodicReader(metricExporter))\\n\")), mdx(\"p\", null, \"Above block of code creates a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MeterProvider\"), \" with a periodic reader.\"), mdx(\"h4\", {\n    \"id\": \"setting-global-options-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#setting-global-options-1\",\n    \"aria-label\": \"setting global options 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting Global Options\"), mdx(\"p\", null, \"To set up global options for the meter provider, we will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otel\"), \" package and add the following line to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"otel.SetMeterProvider(mp)\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-an-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#instrumenting-an-application\",\n    \"aria-label\": \"instrumenting an application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting an Application\"), mdx(\"p\", null, \"Visit the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation\"\n  }, \"OpenTelemetry Go SDK repository\"), \" for a list of instrumentation packages that OpenTelemetry Go SDK supports to trace various calls (incoming requests, outgoing HTTP calls and SQL calls). Check out the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example\"), \" directory inside each instrumentation package for instrumentation instructions.\"), mdx(\"h3\", {\n    \"id\": \"instrumenting-the-aws-sdk\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#instrumenting-the-aws-sdk\",\n    \"aria-label\": \"instrumenting the aws sdk permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting the AWS SDK\"), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go get go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws\"), \" command to import the AWS SDK v2 instrumentation module. The below example displays AWS SDK v2 instrumentation. Check out the complete AWS SDK v2 instrumentation \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-go-contrib/tree/987c197ab0ca775f06a157f2db689fb9af9337d7/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws/example\"\n  }, \"example\"), \".\\nNote: We currently don't provide support for instrumenting AWS SDK v1 calls.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"tracer := otel.Tracer(\\\"demo\\\")\\nctx, span := tracer.Start(context.Background(), \\\"AWS SDK instrumentation\\\")\\ndefer span.End()\\n\\n// init aws config\\ncfg, err := awsConfig.LoadDefaultConfig(ctx)\\nif err != nil {\\n    panic(\\\"configuration error, \\\" + err.Error())\\n}\\n\\n// instrument all aws clients\\notelaws.AppendMiddlewares(&cfg.APIOptions)\\n\\n// Call to S3\\ns3Client := s3.NewFromConfig(cfg)\\ninput := &s3.ListBucketsInput{}\\nresult, err := s3Client.ListBuckets(ctx, input)\\nif err != nil {\\n    fmt.Printf(\\\"Got an error retrieving buckets, %v\\\", err)\\n    return\\n}\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"configuring-sampling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#configuring-sampling\",\n    \"aria-label\": \"configuring sampling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configuring Sampling\"), mdx(\"p\", null, \"By default, the OpenTelemetry Go SDK samples 100% of incoming requests by using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace#AlwaysSample\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"AlwaysSample\")), \".\"), mdx(\"h3\", {\n    \"id\": \"reduce-sampling-rate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#reduce-sampling-rate\",\n    \"aria-label\": \"reduce sampling rate permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Reduce Sampling Rate\"), mdx(\"p\", null, \"To reduce the sampling rate, configure OpenTelemetry Go SDK to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace#TraceIDRatioBased\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"TraceIDRatioBased\")), \" sampler. Below is the code\\nsnippet to configure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TraceIDRatioBased\"), \" sampler to sample 10% of requests.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \" // initialize the traceIDRatioBasedSampler\\n traceIDRatioBasedSampler := trace.TraceIDRatioBased(0.10)\\n\\n // attach traceIDRatioBasedSampler to tracer provider\\n tp := trace.NewTracerProvider(trace.WithSampler(traceIDRatioBasedSampler))\\n\")), mdx(\"h3\", {\n    \"id\": \"sampling-using-aws-x-ray-remote-sampler\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sampling-using-aws-x-ray-remote-sampler\",\n    \"aria-label\": \"sampling using aws x ray remote sampler permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sampling using AWS X-Ray Remote Sampler\"), mdx(\"p\", null, \"AWS X-Ray remote sampler can be initialized using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NewRemoteSampler\"), \" API. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NewRemoteSampler\"), \" can be configured with below options. If AWS X-Ray remote sampler is not able to fetch sampling rules or targets from AWS X-Ray  due to networking or config issues(collector) then remote sampler uses fallback sampler. Fallback sampler always samples 1 req/sec and 5% of additional requests during that second. Moreover, remote sampler uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TraceIDRatioBased\"), \" sampler to enforce \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-sampling.html#xray-console-config\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Rate\")), \" set by customers on AWS X-Ray Console after\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-sampling.html#xray-console-config\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Reservoir\")), \" quota is consumed.\"), mdx(\"p\", null, \"NOTE: ctx passed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NewRemoteSampler\"), \" API is being used in background go routine which serves \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getSamplingRules\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getSamplingTargets\"), \" API call. So any cancellation in context would also kill the go routine. Ideally, passed context should not be scoped to any kind of startup processes where context is short lived.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NewRemoteSampler API options\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Description\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"Default Configuration\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"WithEndpoint(endpoint url.URL)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Endpoint used to communicate with the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"awsproxy\"), \" collector extension\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"http://localhost:2000\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"WithSamplingRulesPollingInterval(interval time.Duration)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Duration between polling of the GetSamplingRules API\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"300 seconds\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"WithLogger(l logr.Logger)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"logging for remote sampler\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://github.com/go-logr/stdr\"\n  }, \"go-logr/stdr\"))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"   ctx := context.Background()\\n\\n   endpoint, err := url.Parse(\\\"http://127.0.0.1:2000\\\"); if err != nil {\\n         return\\n   }\\n\\n   // instantiate remote sampler with options\\n   rs, err := NewRemoteSampler(ctx, \\\"service_name\\\", \\\"cloud_platform\\\", WithEndpoint(endpoint), WithSamplingRulesPollingInterval(350 * time.Second)); if err != nil {\\n         return\\n   }\\n\\n   // attach remote sampler to tracer provider\\n   tp := trace.NewTracerProvider(trace.WithSampler(rs))\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-instrumentation\",\n    \"aria-label\": \"custom instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom Instrumentation\"), mdx(\"h3\", {\n    \"id\": \"creating-custom-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-custom-spans\",\n    \"aria-label\": \"creating custom spans permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Custom Spans\"), mdx(\"p\", null, \"You can use custom spans to monitor the performance of internal activities that are not captured by instrumentation libraries. Note that only spans of kind \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Server\"), \" are converted into X-Ray segments, all other spans are converted into X-Ray subsegments. For more on segments and subsegments, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-segments\"\n  }, \"AWS X-Ray developer guide\"), \".\"), mdx(\"p\", null, \"The below example shows how to create custom spans.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"tracer := otel.Tracer(\\\"demo\\\")\\n\\n// this span will be translated to a segment in X-Ray backend\\nctx, span := tracer.Start(context.Background(), \\\"segment\\\", trace.WithSpanKind(trace.SpanKindServer))\\n\\n// this span will be translated to a subsegment in X-Ray backend\\n_, span2 := tracer.Start(ctx, \\\"subsegment\\\", trace.WithSpanKind(trace.SpanKindClient))\\n\\ndefer span2.End()\\ndefer span.End()\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Adding custom attributes\"), mdx(\"p\", null, \"You can also add custom key-value pairs as attributes onto your spans. The below example displays how to add attributes to the span. You can convert some or all attributes to annotations via the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/7bf2266a025425993a233f66c77a0810ab11a78b/exporter/awsxrayexporter#aws-specific-attributes\"\n  }, \"collector config\"), \", and otherwise they are metadata by default. To read more about X-Ray annotations and metadata see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-annotations\"\n  }, \"AWS X-Ray Developer Guide\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"var tracer = otel.Tracer(\\\"demo\\\")\\n_, span := tracer.Start(\\n    context.Background(),\\n    \\\"DemoExample\\\",\\n    trace.WithAttributes(attribute.String(\\\"a\\\", \\\"1\\\")))\\ndefer span.End()\\n\")), mdx(\"h3\", {\n    \"id\": \"creating-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-metrics\",\n    \"aria-label\": \"creating metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating metrics\"), mdx(\"p\", null, \"Similarly to Traces, you can create custom metrics in your application using the OpenTelemetry API and SDK.\"), mdx(\"p\", null, \"In the following example application we demonstrate how to use metric instruments to record metrics with a Counter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"var meter = otel.Meter(\\\"demo\\\")\\ntimeAliveMetric, _ := meter.Int64Counter(\\n    \\\"time_alive\\\",\\n    instrument.WithDescription(\\\"Total amount of time that the application has been alive\\\"),\\n    instrument.WithUnit(\\\"ms\\\"),\\n)\\ngo func() {\\n    for {\\n        timeAliveMetric.Add(context.Background(), 1000, attribute.String(\\\"a\\\", \\\"1\\\")) // in millisconds\\n        time.Sleep(time.Second * time.Duration(1))\\n    }\\n}()\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sample-application\",\n    \"aria-label\": \"sample application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sample Application\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-community/tree/master/sample-apps/go-sample-app\"\n  }, \"AWS Distro for OpenTelemetry Sample Code with Go SDK\"), \" for instructions on setting up and using the sample app.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Setting up the Global Tracer"},{"depth":3,"value":"Sending Traces"},{"depth":4,"value":"Creating an OpenTelemetry Protocol (OTLP) Exporter"},{"depth":4,"value":"Creating a Tracer Provider"},{"depth":4,"value":"Setting Global Options"},{"depth":3,"value":"Using the AWS resource Detectors"},{"depth":2,"value":"Setting up the Global Meter"},{"depth":3,"value":"Sending metrics"},{"depth":4,"value":"Creating an OpenTelemetry Protocol (OTLP) Exporter"},{"depth":4,"value":"Creating a Meter Provider"},{"depth":4,"value":"Setting Global Options"},{"depth":2,"value":"Instrumenting an Application"},{"depth":3,"value":"Instrumenting the AWS SDK"},{"depth":2,"value":"Configuring Sampling"},{"depth":3,"value":"Reduce Sampling Rate"},{"depth":3,"value":"Sampling using AWS X-Ray Remote Sampler"},{"depth":2,"value":"Custom Instrumentation"},{"depth":3,"value":"Creating Custom Spans"},{"depth":3,"value":"Adding custom attributes"},{"depth":3,"value":"Creating metrics"},{"depth":2,"value":"Sample Application"}]}},"pageContext":{"slug":"/docs/getting-started/go-sdk/manual-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/go-sdk/manual-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}