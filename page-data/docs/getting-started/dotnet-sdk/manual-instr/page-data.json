{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/dotnet-sdk/manual-instr",
    "result": {"data":{"mdx":{"id":"561ea7b4-a75e-581d-8d32-0fe6d7cb39df","excerpt":"The AWS Distro for OpenTelemetry .NET SDK contains an extension library for instrumenting the AWS SDK. In this tutorial, we will introduce how to manuallyâ€¦","fields":{"slug":"/docs/getting-started/dotnet-sdk/manual-instr/"},"frontmatter":{"title":"Manual Instrumentation for Traces and Metrics with the AWS Distro for OpenTelemetry .NET SDK","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry .NET SDK for traces and metrics instrumentation in the application.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Manual Instrumentation for Traces and Metrics with the AWS Distro for OpenTelemetry .NET SDK\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry .NET SDK for traces and metrics instrumentation in the application.\",\n  \"path\": \"/docs/getting-started/dotnet-sdk/manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The AWS Distro for OpenTelemetry .NET SDK contains an extension library for instrumenting the AWS SDK. In this tutorial, we will introduce how to manually instrument your application for traces and metrics step-by-step using AWS Distro for OpenTelemetry .NET SDK.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, \"The AWS Distro for OpenTelemetry .NET SDK is compatible for all the officially supported versions of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dotnet.microsoft.com/en-us/download/dotnet\"\n  }, \".NET\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dotnet.microsoft.com/en-us/download/dotnet-framework\"\n  }, \".NET Framework\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": You\\u2019ll also need to have the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"AWS Distro for OpenTelemetry Collector\"), \" running to export traces and metrics.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"In order to instrument your .NET application for traces and metrics, start by downloading the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry\"), \" nuget package to your application.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"dotnet add package OpenTelemetry\\n\")), mdx(\"p\", null, \"The OpenTelemetry SDK for .NET deals with concerns such as sampling, a processing pipeline, and exporting telemetry to a particular backend.\\nThis generally requires additional packages to be downloaded for specific instrumentation or exporter.\"), mdx(\"p\", null, \"The OpenTelemetry SDK generates traces with W3C random ID which X-Ray backend doesn\\u2019t currently support.\\nYou need to install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry.Contrib.Extensions.AWSXRay\"), \" to be able to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWSXRayIdGenerator\"), \" which generates X-Ray compatible trace IDs.\\nIf you plan to call another application instrumented with AWS X-Ray SDK, you\\u2019ll need to configure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWSXRayPropagator\"), \" as well.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"dotnet add package OpenTelemetry.Contrib.Extensions.AWSXRay\\n\")), mdx(\"p\", null, \"In order to export traces and metics from your application to ADOT Collector, you need to install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry.Exporter.OpenTelemetryProtocol\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"dotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\\n\")), mdx(\"p\", null, \"By default the OpenTelemetry exporter sends data to an OpenTelemetry collector at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:4317\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-up-the-global-tracer-and-meter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setting-up-the-global-tracer-and-meter\",\n    \"aria-label\": \"setting up the global tracer and meter permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting up the Global Tracer and Meter\"), mdx(\"h3\", {\n    \"id\": \"sending-traces-and-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sending-traces-and-metrics\",\n    \"aria-label\": \"sending traces and metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sending Traces and Metrics\"), mdx(\"p\", null, \"Configure AWS X-Ray ID generator, propagator and OpenTelemetry Protocol (OTLP) exporter globally in your application as follows. Make sure to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddXRayTraceId()\"), \" in the very \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"beginning\"), \" when creating \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \"\\nAlso configure the meter provider and add a meter of your choice as well as the OpenTelemetry Protocol (OTLP) exporter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"using OpenTelemetry;\\nusing OpenTelemetry.Contrib.Extensions.AWSXRay.Trace;\\nusing OpenTelemetry.Trace;\\n\\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\\n                        .AddSource(\\\"ActivitySourceName\\\")\\n                        .AddXRayTraceId() // for generating AWS X-Ray compliant trace IDs\\n                        .AddOtlpExporter() // default address localhost:4317\\n                        .Build();\\n\\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\\n                        .AddMeter(\\\"example_meter\\\")\\n                        .AddOtlpExporter()\\n                        .Build();\\n\\nSdk.SetDefaultTextMapPropagator(new AWSXRayPropagator()); // configure AWS X-Ray propagator \\n\")), mdx(\"h3\", {\n    \"id\": \"using-the-aws-resource-detectors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-the-aws-resource-detectors\",\n    \"aria-label\": \"using the aws resource detectors permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using the AWS resource Detectors\"), mdx(\"p\", null, \"The ADOT .NET SDK supports automatically recording metadata in EC2, Elastic Beanstalk, ECS, and EKS environments. You can configure the corresponding resource detector to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" following the EC2 example below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"using OpenTelemetry;\\nusing OpenTelemetry.Contrib.Extensions.AWSXRay.Resources;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\\n                        // other configurations\\n                        .SetResourceBuilder(ResourceBuilder\\n                            .CreateDefault()\\n                            .AddDetector(new AWSEC2ResourceDetector()))\\n                        .Build();\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-net-applications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#instrumenting-net-applications\",\n    \"aria-label\": \"instrumenting net applications permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting .NET Applications\"), mdx(\"p\", null, \"Once you have configured all necessary X-Ray components to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \", you can proceed to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet#getting-started\"\n  }, \"OpenTelemetry .NET SDK's developer guide\"), \" to instrument your .NET application. \"), mdx(\"p\", null, \"OpenTelemetry provides a wide range of instrumentations for popular .NET libraries: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.AspNet#readme\"\n  }, \"Asp.Net\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.AspNetCore#readme\"\n  }, \"Asp.Net Core\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.Http#readme\"\n  }, \"Http\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.GrpcNetClient#readme\"\n  }, \"Grpc\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/main/src/OpenTelemetry.Instrumentation.StackExchangeRedis/README.md\"\n  }, \"Redis\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.SqlClient#readme\"\n  }, \"Sql\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.EntityFrameworkCore#readme\"\n  }, \"EntityFramework\"), \". Instrumenting a library means that every time the library is used to make or handle a request, that library's calls are automatically wrapped within a  span. That span is automatically populated with attributes describing the values used by the library call.\"), mdx(\"h3\", {\n    \"id\": \"aws-sdk-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#aws-sdk-instrumentation\",\n    \"aria-label\": \"aws sdk instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"AWS SDK Instrumentation\"), mdx(\"p\", null, \"For tracing downstream calls to AWS services from your .NET application, you will need to install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry.Contrib.Instrumentation.AWS\"), \" package.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"dotnet add package OpenTelemetry.Contrib.Instrumentation.AWS\\n\")), mdx(\"p\", null, \"Call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddAWSInstrumentation()\"), \" to add AWS SDK client instrumentation to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \". The below example is for an ASP.NET Core application.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"using OpenTelemetry;\\nusing OpenTelemetry.Contrib.Extensions.AWSXRay.Trace;\\nusing OpenTelemetry.Trace;\\n\\npublic void ConfigureServices(IServiceCollection services)\\n{\\n    services.AddControllers();\\n  \\n    tracerProvider.AddAWSInstrumentation() // for tracing calls to AWS services via AWS SDK for .NET\\n                  .AddAspNetCoreInstrumentation()\\n                  .AddOtlpExporter()\\n                  .Build();\\n}\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-instrumentation\",\n    \"aria-label\": \"custom instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom Instrumentation\"), mdx(\"h3\", {\n    \"id\": \"creating-custom-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-custom-spans\",\n    \"aria-label\": \"creating custom spans permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Custom Spans\"), mdx(\"p\", null, \"In .NET, you can use the activity API to create custom spans to monitor the performance of internal activities that are not captured by instrumentation libraries. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"using System.Diagnostics;\\n\\nActivitySource activitySource = new ActivitySource(\\\"ActivitySourceName\\\", \\\"ActivitySourceVersion\\\");\\nvar activity = activitySource.StartActivity(\\\"ActivityName\\\", ActivityKind.Server); // this will be translated to a X-Ray Segment\\nvar internalActivity = activitySource.StartActivity(\\\"ActivityName\\\", ActivityKind.Internal); // this will be translated to an X-Ray Subsegment\\n\")), mdx(\"p\", null, \"Note that only spans of kind \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Server\"), \" are converted into X-Ray segments, all other kind of spans (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Internal\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Client\"), \", etc.) are converted into X-Ray subsegments. For more on segments and subsegments, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-segments\"\n  }, \"AWS X-Ray developer guide\"), \".\"), mdx(\"h3\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Adding Custom Attributes\"), mdx(\"p\", null, \"You can also add custom key-value pairs as attributes onto your spans. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"activity.SetTag(\\\"http.method\\\", \\\"GET\\\");\\nactivity.SetTag(\\\"http.url\\\", \\\"http://www.mywebsite.com\\\");\\n\")), mdx(\"p\", null, \"Attributes are converted to metadata by default. If you configure your collector, you can convert some or all of the attributes to annotations. To read more about X-Ray annotations and metadata see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-annotations\"\n  }, \"AWS X-Ray developer guide\"), \".\"), mdx(\"p\", null, \"For more information about the activity API, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/src/OpenTelemetry.Api#instrumenting-a-libraryapplication-with-net-activity-api\"\n  }, \"OpenTelemetry .NET SDK's developer guide\"), \".\"), mdx(\"h3\", {\n    \"id\": \"creating-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-metrics\",\n    \"aria-label\": \"creating metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Metrics\"), mdx(\"p\", null, \"Similarly to Traces, you can create custom metrics in your application using the OpenTelemetry API and SDK.\"), mdx(\"p\", null, \"In the following example application we demonstrate how to use metric instruments to record metrics with a Counter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"using System.Threading.Tasks;\\n\\nMeter meter = new Meter(\\\"example_meter\\\", \\\"1.0\\\"); \\n\\ntotalTimeSentObserver = meter.CreateCounter<int>(\\\"time_alive\\\",\\n                \\\"ms\\\",\\n                \\\"Measures the total time the application has been alive\\\");\\n\\nwhile (true) {\\n    var delayTask = Task.Delay(1000);\\n    await Task.Run(() => totalTimeSentObserver.Add(1, new KeyValuePair<string, object>(\\\"attribute\\\", \\\"sample\\\")));\\n    await delayTask;\\n}\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sample-application\",\n    \"aria-label\": \"sample application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sample Application\"), mdx(\"p\", null, \"Take a reference to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-community/tree/master/sample-apps/dotnet-sample-app\"\n  }, \"sample application\"), \" that is instrumented by ADOT and OpenTelemetry .NET SDK.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Setting up the Global Tracer and Meter"},{"depth":3,"value":"Sending Traces and Metrics"},{"depth":3,"value":"Using the AWS resource Detectors"},{"depth":2,"value":"Instrumenting .NET Applications"},{"depth":3,"value":"AWS SDK Instrumentation"},{"depth":2,"value":"Custom Instrumentation"},{"depth":3,"value":"Creating Custom Spans"},{"depth":3,"value":"Adding Custom Attributes"},{"depth":3,"value":"Creating Metrics"},{"depth":2,"value":"Sample Application"}]}},"pageContext":{"slug":"/docs/getting-started/dotnet-sdk/manual-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/dotnet-sdk/manual-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}