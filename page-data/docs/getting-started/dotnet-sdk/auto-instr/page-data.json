{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/dotnet-sdk/auto-instr",
    "result": {"data":{"mdx":{"id":"3a5cfa4d-e047-5ca1-9d7c-4499c13ccbad","excerpt":"Introduction The AWS Distro for OpenTelemetry (ADOT) .NET Auto-Instrumentation use  Host startup hook \nand  CLR Profiler  to be injected into .NET applicationâ€¦","fields":{"slug":"/docs/getting-started/dotnet-sdk/auto-instr/"},"frontmatter":{"title":"Tracing and Metrics with the AWS Distro for OpenTelemetry .NET Auto-Instrumentation","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use AWS Distro for OpenTelemetry .NET Auto-Instrumentation for traces and metrics instrumentation in the application.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Tracing and Metrics with the AWS Distro for OpenTelemetry .NET Auto-Instrumentation\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use AWS Distro for OpenTelemetry .NET Auto-Instrumentation for traces and metrics instrumentation in the application.\",\n  \"path\": \"/docs/getting-started/dotnet-sdk/auto-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"The AWS Distro for OpenTelemetry (ADOT) .NET Auto-Instrumentation use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dotnet/runtime/blob/main/docs/design/features/host-startup-hook.md\"\n  }, \"Host startup hook\"), \"\\nand \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/\"\n  }, \"CLR Profiler\"), \" to be injected into .NET application for gathering\\ntelemetry data from a diverse set of libraries and frameworks. The ADOT .NET auto-Instrumentation will automatically insturment application code at startup\\nto collect tracing data. It is preconfigured for compatibility with X-Ray and AWS services but can also be used with any\\nother tracing backend. Out of the box, it propagates traces using all of W3C Trace Context, B3, and X-Amzn-Trace-Id.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, \"The ADOT .NET auto-Instrumentation is compatible for all the officially supported versions of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dotnet.microsoft.com/en-us/download/dotnet\"\n  }, \".NET\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dotnet.microsoft.com/en-us/download/dotnet-framework\"\n  }, \".NET Framework\"), \".\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\"), \" running to export traces to X-Ray.\"), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"Download the installation script of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-dotnet-instrumentation/releases/latest/download/aws-otel-dotnet-install.sh\"\n  }, \"latest version\"), \".\"), mdx(\"p\", null, \"If you'd prefer to pin to a specific version, check out our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-dotnet-instrumentation/releases\"\n  }, \"releases\"), \".\"), mdx(\"p\", null, \"The ADOT .NET NuGet package is also published in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/AWS.Distro.OpenTelemetry.AutoInstrumentation\"\n  }, \"NuGet repository\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"running-an-application-with-auto-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#running-an-application-with-auto-instrumentation\",\n    \"aria-label\": \"running an application with auto instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Running an Application with Auto-Instrumentation\"), mdx(\"p\", null, \"The ADOT .NET auto-Instrumentation could be installed by running installation script \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aws-otel-dotnet-install.sh\"), \" or manually download packages from GitHub.\\nTo run your app with the ADOT .NET auto-Instrumentation, setup environment variables with script \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"instrument.sh\"), \" before starting up your application,\\npointing to the downloaded ADOT .NET auto-Instrumentation artifact. In addition, while not required by the ADOT .NET auto-Instrumentation itself,\\nalmost all tracing systems require a service name and service namespace defined to identify your application, which you can specify\\nwith the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_RESOURCE_ATTRIBUTES\"), \" environment variable and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service.name\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service.namespace\"), \" attribute keys.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \". $HOME/.otel-dotnet-auto/instrument.sh\\nexport OTEL_RESOURCE_ATTRIBUTES=service.name=MyApp,service.namespace=MyTeam \\n\")), mdx(\"p\", null, \"The above command will setup your application with the ADOT .NET auto-Instrumentation activated, and instrumentation is then activated\\nautomatically when your applicaiton start. For many cases, this is all you need to use tracing.\"), mdx(\"h3\", {\n    \"id\": \"configuring-auto-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#configuring-auto-instrumentation\",\n    \"aria-label\": \"configuring auto instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configuring Auto-Instrumentation\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Skip this part if you are onboarding with CloudWatch Application Signals.\"), mdx(\"p\", null, \"By default ADOT .NET auto-Instrumentation uses the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol\"\n  }, \"OTLP exporter\"), \"\\nand is configured to send data to a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector/blob/master/receiver/otlpreceiver/README.md\"\n  }, \"OpenTelemetry collector\"), \"\\nat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4317\"), \" for both metrics and traces.\"), mdx(\"p\", null, \"The ADOT .NET auto-Instrumentation can be configured with environment variables as the primary way.\\nFor example, to set the random sampling rate for creating traces, you can set the environment variables\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER=parentbased_traceidratio\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=0.3\"), \" to configure a sampling rate of 30%.\"), mdx(\"p\", null, \"More SDK configuration can be found in upstream \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/languages/sdk-configuration/\"\n  }, \"OpenTelemetry SDK Configuration\"), \"\\nand \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/blob/main/docs/config.md\"\n  }, \"OpenTelemetry .NET SDK Configuraiton\"), \".\"), mdx(\"h3\", {\n    \"id\": \"using-cloudwatch-application-signals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-cloudwatch-application-signals\",\n    \"aria-label\": \"using cloudwatch application signals permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using CloudWatch Application Signals\"), mdx(\"p\", null, \"You can use CloudWatch Application Signals to automatically instrument your applications on AWS using ADOT .NET auto-instrumentation so that you can monitor current application health and track long-term application performance against your business objectives. Application Signals provides you with a unified, application-centric view of your applications, services, and dependencies, and helps you monitor and triage application health.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\"\n  }, \"Get started with CloudWatch Application Signals\")), mdx(\"h3\", {\n    \"id\": \"using-x-ray-remote-sampling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-x-ray-remote-sampling\",\n    \"aria-label\": \"using x ray remote sampling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using X-Ray Remote Sampling\"), mdx(\"p\", null, \"The ADOT .NET Auto-Instrumentation can be configured to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-sampling.html\"\n  }, \"X-Ray remote sampling\"), \"\\nby setting the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER=xray\"), \". You will also need to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/remote-sampling\"\n  }, \"configure the OpenTelemetry collector\"), \"\\nto allow the application to fetch sampling configuration. \"), mdx(\"p\", null, \"You can further configure the Sampler by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG\"), \" environment variable. You can update the endpoint and the polling rate as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=endpoint=<ENDPOINT>,polling_interval=<INTERVAL_IN_SECS>\\n\")), mdx(\"p\", null, \"By default the sampler sends requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:2000\"), \" and has a polling rate of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"300 seconds\"), \". By setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG\"), \"\\nenvironment variable you can change the endpoint the sampler talks with when getting sampling configuration from AWS X-Ray Console. For example setting\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=endpoint=http://localhost:4000,polling_interval=60\"), \" would configure the sampler to communicate with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4000\"), \" and poll the sampling rules every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"60 seconds\"), \".\"), mdx(\"h2\", {\n    \"id\": \"using-manual-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-manual-instrumentation\",\n    \"aria-label\": \"using manual instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using Manual Instrumentation\"), mdx(\"p\", null, \"Because there can only be one global \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MeterProvider\"), \", manual instrumentation should not instantiate its own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MeterProvider\"), \" if used together alongside auto-instrumentation.\\nGiven that the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MeterProvider\"), \" is used, custom tracing and metrics works the same way when using automatic instrumentation or manual instrumentation.\\nFor information about custom trace instrumentation, see our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/dotnet-sdk/manual-instr\"\n  }, \"docs on manual instrumentation\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-applications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sample-applications\",\n    \"aria-label\": \"sample applications permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sample Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-dotnet-instrumentation/blob/main/sample-applications/integration-test-app\"\n  }, \"Sample Application Using Traces and Metrics\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Running an Application with Auto-Instrumentation"},{"depth":3,"value":"Configuring Auto-Instrumentation"},{"depth":3,"value":"Using CloudWatch Application Signals"},{"depth":3,"value":"Using X-Ray Remote Sampling"},{"depth":2,"value":"Using Manual Instrumentation"},{"depth":2,"value":"Sample Applications"}]}},"pageContext":{"slug":"/docs/getting-started/dotnet-sdk/auto-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/dotnet-sdk/auto-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}