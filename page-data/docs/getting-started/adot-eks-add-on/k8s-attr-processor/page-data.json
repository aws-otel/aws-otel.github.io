{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/adot-eks-add-on/k8s-attr-processor",
    "result": {"data":{"mdx":{"id":"2075f448-0986-5bec-928a-f6f2b0543e95","excerpt":"In OpenTelemetry, a resource represents the source of telemetry signals, for example, a pod in Kubernetes that exposes \nPrometheus metrics. The Kubernetesâ€¦","fields":{"slug":"/docs/getting-started/adot-eks-add-on/k8s-attr-processor/"},"frontmatter":{"title":"Kubernetes Attributes Processor","description":"This page describes how the Kubernetes attributes processor can be used","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Kubernetes Attributes Processor\",\n  \"description\": \"This page describes how the Kubernetes attributes processor can be used\",\n  \"path\": \"/docs/getting-started/adot-eks-add-on/k8s-attr-processor\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In OpenTelemetry, a resource represents the source of telemetry signals, for example, a pod in Kubernetes that exposes\\nPrometheus metrics. The Kubernetes attributes processor allows for the automatic setting of span and metric\\nresource attributes with Kubernetes metadata. More information in OpenTelemetry resources can be found in the official\\ndocumentation \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/concepts/glossary/#resource\"\n  }, \"here\"), \". \"), mdx(\"h1\", {\n    \"id\": \"how-the-kubernetes-attributes-processor-works\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#how-the-kubernetes-attributes-processor-works\",\n    \"aria-label\": \"how the kubernetes attributes processor works permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How the Kubernetes Attributes Processor works\"), mdx(\"p\", null, \"A collector receiver is responsible for storing the  connection ip, the ip address in which the signal originated from,\\nin the telemetry signals context for use by subsequent components. By default, if the connection ip is available,\\nthe Kubernetes attributes processor will attempt match the connection ip to a pods ip. If a match is made pod metadata\\nis attached as resource attributes. Additional association rules can also be specified if the connection ip is not\\navailable. The Kubernetes attributes processor\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/k8sattributesprocessor\"\n  }, \"README\"), \" has more detailed\\ninformation on processor configuration options. \"), mdx(\"h1\", {\n    \"id\": \"how-can-i-leverage-these-new-resource-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#how-can-i-leverage-these-new-resource-attributes\",\n    \"aria-label\": \"how can i leverage these new resource attributes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How can I leverage these new resource attributes?\"), mdx(\"p\", null, \"After the Kubernetes attributes processor associates a data point with a Kubernetes pod it will automatically attach Kubernetes pod\\nmetadata as resource attributes. The default list of resource attributes populated can be found within the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/k8sattributesprocessor/config.go\"\n  }, \"Kubernetes attributes processor\\nmodule\"), \".\\nAdditional resource attributes from a pre-defined list can be selected using the configuration. Knowing\\nhow to leverage these new resource attributes is entirely up to you. In the following two sections we will\\nprovide examples in which these resource attributes can be utilized to enhance your observability solution.\\nFirst, we will introduce a scenario that will leverage the resource attributes in a subsequent collector\\nprocessor. Second, we will present a few different places where Kubernetes resource attributes can be used after\\nexporting out of the collector and into a backed of your choosing. \"), mdx(\"h2\", {\n    \"id\": \"gateway-collector-example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#gateway-collector-example\",\n    \"aria-label\": \"gateway collector example permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Gateway collector example\"), mdx(\"p\", null, \"In the following example we have two applications that are instrumented with OpenTelemetry SDKs.\\nOne application will send telemetry signals directly to a gateway collector and the other is\\nconnected to a proxy. The proxy is responsible for forwarding the telemetry signals to the gateway.\\nThe gateway collector is a collector which receives all telemetry signals over a single OTLP endpoint\\nbefore exporting them out of the cluster. The OpenTelemetry documentation provides more details about\\nthe \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/collector/deployment/gateway/\"\n  }, \"gateway deployment pattern\"), \". Telemetry\\nsignals not sent directly to the gateway collector must have Kubernetes resource attributes populated so that the\\nKubernetes attributes processor can perform associations. OpenTelemetry SDKs allows \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/concepts/sdk-configuration/general-sdk-configuration/#otel_resource_attributes\"\n  }, \"configuration of resource\\nattributes\"), \"\\nthrough environment variables. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://kubernetes.io/docs/concepts/workloads/pods/downward-api/\"\n  }, \"Kubernetes downward api\"), \"\\ncan be used to make metatadata fields available to the SDK environment variable. \"), mdx(\"img\", {\n    src: exampleDiag,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"This example scenario can support multiple telemetry sources as long as the data ends up at our\\nsingle gateway collector. \"), mdx(\"p\", null, \"The following collector configuration would be used by the gateway ADOT collector. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"extensions:\\n  sigv4auth:\\n    region: us-west-2\\n    service: \\\"aps\\\"\\n\\nreceivers:  \\n  otlp:\\n    grpc:\\n    http:\\n\\nprocessors:\\n  batch:\\n\\nexporters:\\n  prometheusremotewrite:\\n    endpoint: fake.amp.endpoint\\n    auth:\\n      authenticator: sigv4auth\\n  awsxray:\\n\\nservice:\\n  extensions: [sigv4auth]\\n  pipelines:   \\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [prometheusremotewrite]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [awsxray]\\n\")), mdx(\"p\", null, \"The starting configuration does not do much. Metrics and traces are ingested using an OTLP receiver\\nwhich are then exported to Amazon Managed Service for Prometheus (AMP) and AWS X-Ray respectively.\"), mdx(\"p\", null, \"Our observability solution now has a new requirement. We need to drop all metric and traces which\\nflow through or originate from a specific node. The first step to accomplish this is to ensure that\\nall data points have the necessary resource attributes attached to them. To do this we will configure\\nour Kubernetes attributes processor. During this step we also add the indexed_attributes field in the x-ray\\nexporter. The indexed_attributes option ensures that the k8s.node.name resource attribute is searchable\\nin AWS X-Ray.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"extensions:\\n  sigv4auth:\\n    region: us-west-2\\n    service: \\\"aps\\\"\\n\\nreceivers:  \\n  otlp:\\n    grpc:\\n    http:\\n\\nprocessors:\\n  k8sattributes:\\n    pod_association:\\n      # for telemetry signals that may have came through a proxy\\n      - sources:\\n          - from: resource_attribute\\n            name: k8s.pod.uid\\n          - from: resource_attribute\\n            name: k8s.namespace.name\\n      # for telemetry signals that are sent directly to the gateway\\n      - sources:\\n          - from: connection\\n  batch:\\n\\nexporters:\\n  prometheusremotewrite:\\n    endpoint: fake.amp.endpoint\\n    auth:\\n      authenticator: sigv4auth\\n  awsxray:\\n      indexed_attributes: [otel.resource.k8s.node.name]\\n\\nservice:\\n  extensions: [sigv4auth]\\n  pipelines:   \\n    metrics:\\n      receivers: [otlp]\\n      processors: [k8sattributes, batch]\\n      exporters: [prometheusremotewrite]\\n    traces:\\n      receivers: [otlp]\\n      processors: [k8sattributes, batch]\\n      exporters: [awsxray]\\n\")), mdx(\"p\", null, \"After our Kubernetes attributes processor is configured we can then leverage additional processors that are\\navailable in the ADOT collector. To drop metrics we will utilize the filter processor and to sample\\nout traces we will leverage the group by trace and tail sampling processor. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/advanced-sampling\"\n  }, \"advanced sampling documentation page\"), \"\\nproviders a deeper look into advanced sampling configurations. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"extensions:\\n  sigv4auth:\\n    region: us-west-2\\n    service: \\\"aps\\\"\\n\\nreceivers:  \\n  otlp:\\n    grpc:\\n    http:\\n\\nprocessors:\\n  k8sattributes:\\n    pod_association:\\n      - sources:\\n          - from: resource_attribute\\n            name: k8s.pod.uid\\n          - from: resource_attribute\\n            name: k8s.namespace.name\\n      - sources:\\n          - from: connection\\n  groupbytrace:\\n  tailsampling:\\n    policies:\\n      [\\n        {\\n          name: node-policy,\\n          type: string_attribute,\\n          string_attribute: {key: k8s.node.name, values: [badnode-1234]}\\n        }\\n      ]\\n  filter:\\n    metrics:\\n      exclude:\\n        resource_attributes:\\n          - key: k8s.node.name\\n            value: badnode-1234\\n  batch:\\n\\nexporters:\\n  prometheusremotewrite:\\n    endpoint: fake.amp.endpoint\\n    resource_to_telemetry_conversion:\\n      enabled: true\\n    auth:\\n      authenticator: sigv4auth\\n  awsxray:\\n    indexed_attributes: [otel.resource.k8s.node.name]\\n\\nservice:\\n  extensions: [sigv4auth]\\n  pipelines:   \\n    metrics:\\n      receivers: [otlp]\\n      processors: [k8sattributes, filter, batch]\\n      exporters: [prometheusremotewrite]\\n    traces:\\n      receivers: [otlp]\\n      processors: [k8sattributes, groupbytrace, tailsampling, batch]\\n      exporters: [awsxray]\\n\")), mdx(\"p\", null, \"Our final configuration is complete. While this example is very small and very specific the idea is\\nto show you the different ways Kubernetes resource attributes processor can be used within a collector pipeline.\\nBeing able to reliably associate pod metadata with incoming telemetry signals can come in handy\\nin many ways! Next, we will give you a few more ideas on where these resource attributes can be\\nused outside of a collector. \"), mdx(\"h1\", {\n    \"id\": \"using-kubernetes-resource-attributes-outside-of-a-collector\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#using-kubernetes-resource-attributes-outside-of-a-collector\",\n    \"aria-label\": \"using kubernetes resource attributes outside of a collector permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using Kubernetes resource attributes outside of a collector\"), mdx(\"p\", null, \"Kubernetes resources are useful outside of the collector also. Below are\\nsome different places where these resource attributes can come in handy. Generally,\\nresource attributes can assist you in narrowing down queries while troubleshooting\\nor aggregating data across a specific set of Kubernetes resources. \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Visualize your Prometheus metrics in Amazon Managed Grafana. Use Grafana dashboards\\nto query data based on Kubernetes resource attributes. Use the resource_to_telemetry_conversion\\nconfiguration option to translate resource attributes to Prometheus labels. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use Kubernetes resource attributes to filter traces in X-Ray based on annotations values.\\nThe AWS X-Ray developer guides provides more information about filtering with \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html#console-filters-complex\"\n  }, \"complex keywords\"), \".\\nUse the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"indexed_attributes\"), \" configuration option in the X-Ray exporter to ensure\\nthat the resource attributes are searchable.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you leverage the AWS EMF exporter, enable \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/awsemfexporter#resource-attributes-to-metric-labels\"\n  }, \"resource_to_telemetry_conversion\"), \"\\nto make Kubernetes resource attributes available to the EMF Exporter. New dimension sets, dashboards,\\nand alarms that can leverage Kubernetes resource attributes. \")), mdx(\"h2\", {\n    \"id\": \"previous-topic-injecting-auto-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#previous-topic-injecting-auto-instrumentation\",\n    \"aria-label\": \"previous topic injecting auto instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/docs/getting-started/adot-eks-add-on/config-auto-instrumentation\"\n  }, \"Previous Topic: Injecting Auto-instrumentation\")), mdx(\"h2\", {\n    \"id\": \"next-topic-target-allocator\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#next-topic-target-allocator\",\n    \"aria-label\": \"next topic target allocator permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/docs/getting-started/adot-eks-add-on/target-allocator\"\n  }, \"Next Topic: Target Allocator\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"How the Kubernetes Attributes Processor works"},{"depth":1,"value":"How can I leverage these new resource attributes?"},{"depth":2,"value":"Gateway collector example"},{"depth":1,"value":"Using Kubernetes resource attributes outside of a collector"},{"depth":2,"value":"Previous Topic: Injecting Auto-instrumentation"},{"depth":2,"value":"Next Topic: Target Allocator"}]}},"pageContext":{"slug":"/docs/getting-started/adot-eks-add-on/k8s-attr-processor/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/adot-eks-add-on/k8s-attr-processor.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}