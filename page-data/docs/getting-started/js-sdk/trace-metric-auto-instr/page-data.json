{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/js-sdk/trace-metric-auto-instr",
    "result": {"data":{"mdx":{"id":"d0c89215-25f8-5f93-87a5-b98ef4b9d1e1","excerpt":"Introduction The AWS Distro for OpenTelemetry (ADOT) JavaScript SDK supports automatic instrumentation for NodeJS applications. It automatically produces spansâ€¦","fields":{"slug":"/docs/getting-started/js-sdk/trace-metric-auto-instr/"},"frontmatter":{"title":"Tracing and Metrics with the AWS Distro for OpenTelemetry JavaScript Auto-Instrumentation","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry JavaScript SDK for traces and metrics instrumentation in the application...","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Tracing and Metrics with the AWS Distro for OpenTelemetry JavaScript Auto-Instrumentation\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry JavaScript SDK for traces and metrics instrumentation in the application...\",\n  \"path\": \"/docs/getting-started/JavaScript-sdk/auto-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"The AWS Distro for OpenTelemetry (ADOT) JavaScript SDK supports automatic instrumentation for NodeJS applications. It automatically produces spans with telemetry data describing the values used by the NodeJS frameworks in your application without adding a single line of code. It is preconfigured for compatibility with AWS X-Ray and propagates the trace context across AWS services, and it can also be used with any other tracing backend.\"), mdx(\"p\", null, \"In this guide, we walk through the steps needed to trace an application and produce metrics with auto-instrumentation.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, \"The current supported NodeJS versions to run an application using OpenTelemetry JavaScript are versions 14, 16, 18, 20, and 22.\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\"), \" running to export traces and metrics.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"The easiest way to download the packages needed for auto-instrumentation is by using NPM:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm install @aws/aws-distro-opentelemetry-node-autoinstrumentation\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@aws/aws-distro-opentelemetry-node-autoinstrumentation\"), \" package provides a register script that configures the OpenTelemetry SDK with some basic defaults. This script is used for starting the Auto Instrumentation. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry/api\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry/auto-instrumentations-node\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry/core\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry/sdk-node\"), \", and several other required \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry\"), \" dependency packages are installed by default along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@aws/aws-distro-opentelemetry-node-autoinstrumentation\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry/auto-instrumentations-node\"), \" provides the library instrumentations from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/metapackages/auto-instrumentations-node#supported-instrumentations\"\n  }, \"OpenTelemetry JS Contrib\"), \" that each enables the instrumentation functionality of their respective libraries. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry/sdk-node\"), \" library provides the functionality to configure, detect, install, and initialize all instrumentation packages supported for your application\\u2019s dependencies. Check out the OpenTelemetry registry for a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/ecosystem/registry/?s=&component=instrumentation&language=js\"\n  }, \"full list of instrumentation packages provided by OpenTelemetry JavaScript\"), \".\"), mdx(\"h2\", {\n    \"id\": \"running-an-application-with-auto-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#running-an-application-with-auto-instrumentation\",\n    \"aria-label\": \"running an application with auto instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Running an Application with Auto-Instrumentation\"), mdx(\"p\", null, \"Auto-instrumentation uses a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"register\"), \" script that is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"required\\\"\"), \" when the NodeJS application is started. This script will automatically load instrumentations for NodeJS built-in modules and common packages.\"), mdx(\"p\", null, \"The AWS Distro can be configured using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NODE_OPTIONS\"), \" environment variable to run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"register\"), \" script.\"), mdx(\"p\", null, \"Start your application using auto-instrumentation can be as simple as the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"export NODE_OPTIONS=\\\"--require @aws/aws-distro-opentelemetry-node-autoinstrumentation/register\\\"\\nnode app.js\\n\")), mdx(\"p\", null, \"Alternatively, you can run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"node --require '@aws/aws-distro-opentelemetry-node-autoinstrumentation/register' app.js\\n\")), mdx(\"h3\", {\n    \"id\": \"configuring-auto-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#configuring-auto-instrumentation\",\n    \"aria-label\": \"configuring auto instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configuring Auto-Instrumentation\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Skip this part if you are onboarding with CloudWatch Application Signals.\"), mdx(\"p\", null, \"Environment variables are the primary way in which the OpenTelemetry SDK for JavaScript is configured. For example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"By default, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@aws/aws-distro-opentelemetry-node-autoinstrumentation\"), \" uses the OTLP exporter and is configured to send data to a OpenTelemetry collector at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4318\"), \" for both metrics and traces. The configuration of your SDK exporter depends on how you have configured your ADOT Collector. To learn more about how the ADOT Collector can be configured, refer to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector Documentation\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The random sampling rate for creating traces can be set through the environment variables \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER=parentbased_traceidratio\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=0.3\"), \" to configure a sampling rate of 30%. Sampling related configuration can be found in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry-JavaScript.readthedocs.io/en/latest/sdk/trace.sampling.html\"\n  }, \"opentelemetry.sdk.trace.sampling submodule public doc\"), \".\"))), mdx(\"p\", null, \"More SDK configuration can be found in upstream \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/languages/sdk-configuration/\"\n  }, \"opentelemetry SDK config public doc\"), \".\"), mdx(\"h3\", {\n    \"id\": \"using-cloudwatch-application-signals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-cloudwatch-application-signals\",\n    \"aria-label\": \"using cloudwatch application signals permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using CloudWatch Application Signals\"), mdx(\"p\", null, \"You can use CloudWatch Application Signals to automatically instrument your NodeJS applications on AWS using ADOT JavaScript auto-instrumentation so that you can monitor current application health and track long-term application performance against your business objectives. Application Signals provides you with a unified, application-centric view of your applications, services, and dependencies, and helps you monitor and triage application health.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Monitoring-Sections.html\"\n  }, \"Get started with CloudWatch Application Signals\")), mdx(\"h3\", {\n    \"id\": \"using-x-ray-remote-sampling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-x-ray-remote-sampling\",\n    \"aria-label\": \"using x ray remote sampling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using X-Ray Remote Sampling\"), mdx(\"p\", null, \"The ADOT JavaScript Auto-Instrumentation can be configured to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-sampling.html\"\n  }, \"X-Ray remote sampling\"), \"\\nby setting the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER=xray\"), \". You will also need to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/remote-sampling\"\n  }, \"configure the OpenTelemetry collector\"), \"\\nto allow the application to fetch sampling configuration. \"), mdx(\"p\", null, \"You can further configure the Sampler by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG\"), \" environment variable. You can update the endpoint and the polling rate as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=endpoint=<ENDPOINT>,polling_interval=<INTERVAL_IN_SECS>\\n\")), mdx(\"p\", null, \"By default the sampler sends requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:2000\"), \" and has a polling rate of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"300 seconds\"), \". By setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG\"), \"\\nenvironment variable you can change the endpoint the sampler talks with when getting sampling configuration from AWS X-Ray Console. For example setting\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=endpoint=http://localhost:4000,polling_interval=60\"), \" would configure the sampler to communicate with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4000\"), \" and poll the sampling rules every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"60 seconds\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-manual-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-manual-instrumentation\",\n    \"aria-label\": \"using manual instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using Manual Instrumentation\"), mdx(\"p\", null, \"While the register script for ADOT JavaScript provides automatic instrumentation for popular frameworks, you might find the need\\nto perform manual instrumentation in your application, for example, to provide custom data or to instrument\\ncode within the application itself.\"), mdx(\"p\", null, \"To perform manual instrumentation alongside the automatic instrumentation, you will need to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@opentelemetry/api\"), \" as a dependency. The\\nversion of this dependency is recommended to be the same version of the same dependency that is used by the ADOT JavaScript SDK.\"), mdx(\"h5\", {\n    \"id\": \"to-add-the-opentelemetryapi-dependency-via-npm\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"#to-add-the-opentelemetryapi-dependency-via-npm\",\n    \"aria-label\": \"to add the opentelemetryapi dependency via npm permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"To add the \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"@opentelemetry/api\"), \" dependency via NPM:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm install @opentelemetry/api\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-applications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sample-applications\",\n    \"aria-label\": \"sample applications permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sample Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-js-instrumentation/tree/main/sample-applications/simple-express-server\"\n  }, \"Simple Express.js Server Sample Application using ADOT JavaScript Auto-Instrumentation\"))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Running an Application with Auto-Instrumentation"},{"depth":3,"value":"Configuring Auto-Instrumentation"},{"depth":3,"value":"Using CloudWatch Application Signals"},{"depth":3,"value":"Using X-Ray Remote Sampling"},{"depth":2,"value":"Using Manual Instrumentation"},{"depth":5,"value":"To add the @opentelemetry/api dependency via NPM:"},{"depth":2,"value":"Sample Applications"}]}},"pageContext":{"slug":"/docs/getting-started/js-sdk/trace-metric-auto-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/js-sdk/trace-metric-auto-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}