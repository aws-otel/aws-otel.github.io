{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/js-sdk/metric-manual-instr",
    "result": {"data":{"mdx":{"id":"912d20ae-1715-5314-990c-dacbe6dfeb80","excerpt":"Metrics auto instrumentation has not been supported in ADOT/OpenTelemetry yet. We have to manually instrumenting code in the application to generate applicationâ€¦","fields":{"slug":"/docs/getting-started/js-sdk/metric-manual-instr/"},"frontmatter":{"title":"Metrics on AWS Distro for OpenTelemetry JavaScript SDK","description":"Metrics auto instrumentation has not been supported in ADOT/OpenTelemetry yet. We have to manually instrumenting code in the application to generate application metrics. Here is an example with steps for modifying application code to create metrics with JavaScript SDK.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Metrics on AWS Distro for OpenTelemetry JavaScript SDK\",\n  \"description\": \"Metrics auto instrumentation has not been supported in ADOT/OpenTelemetry yet. We have to manually instrumenting code in the application to generate application metrics. Here is an example with steps for modifying application code to create metrics with JavaScript SDK.\",\n  \"path\": \"/docs/getting-started/js-sdk/metric-manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Metrics auto instrumentation has not been supported in ADOT/OpenTelemetry yet. We have to manually instrumenting code in the application to generate application metrics. Here is an example with steps for modifying application code to create metrics with JavaScript SDK.\"), mdx(\"p\", null, \"OpenTelemetry JavaScript SDK has provided metrics API for metrics instrumentation in applications. You can follow the steps and sample code below to create OpenTelemetry Metrics and send it over to ADOT Collector.\"), mdx(\"p\", null, \"In this tutorial, we will introduce how to use OpenTelemetry JavaScript SDK for metric instrumentation in the application.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/en/download/\"\n  }, \"Node JS v8.50 (or later)\"), \" is required to run an application using OpenTelemetry.\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the AWS Distro for OpenTelemetry Collector running to export metrics to Amazon CloudWatch.\\nSee the ADOT Collector documentation for setup instructions.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"getting-the-sdk-and-dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#getting-the-sdk-and-dependencies\",\n    \"aria-label\": \"getting the sdk and dependencies permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Getting the SDK and Dependencies\"), mdx(\"p\", null, \"In order to trace your application, the following OpenTelemetry packages will be required to be installed in your applications main directory.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"$ npm install \\\\\\n  @opentelemetry/api \\\\\\n  @opentelemetry/sdk-node \\\\\\n  @opentelemetry/exporter-metrics-otlp-grpc \\\\\\n  @opentelemetry/sdk-metrics \\\\\\n  @opentelemetry/api-metrics\\n\")), mdx(\"h2\", {\n    \"id\": \"instrumenting-code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#instrumenting-code\",\n    \"aria-label\": \"instrumenting code permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting Code\"), mdx(\"p\", null, \"Once OpenTelemetry Dependencies have been imported to application, we can start to instrument code for creating metrics.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Initiate OpenTelemetry Metrics exporter to send metrics to ADOT Collector\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"const process = require('process');\\nconst opentelemetry = require(\\\"@opentelemetry/sdk-node\\\");\\nconst { Resource } = require(\\\"@opentelemetry/resources\\\");\\nconst { SemanticResourceAttributes } = require(\\\"@opentelemetry/semantic-conventions\\\");\\nconst { PeriodicExportingMetricReader } = require(\\\"@opentelemetry/sdk-metrics\\\");\\nconst { OTLPMetricExporter } = require(\\\"@opentelemetry/exporter-metrics-otlp-grpc\\\");\\n\\nconst _resource = Resource.default().merge(new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: \\\"js-sample-app\\\",\\n    }));\\n}\\nconst _metricReader = new PeriodicExportingMetricReader({\\n    exporter: new OTLPMetricExporter(),\\n    exportIntervalMillis: 1000\\n});\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a OpenTelemetry Metric Provider for initiating metrics\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"async function nodeSDKBuilder() {\\n    const sdk = new opentelemetry.NodeSDK({\\n        metricReader: _metricReader,\\n        resource: _resource,\\n    });\\n    \\n    // this enables the API to record telemetry\\n    await sdk.start(); \\n    // gracefully shut down the SDK on process exit\\n    process.on('SIGTERM', () => {\\n    sdk.shutdown()\\n      .then(() => console.log('Metrics terminated'))\\n      .catch((error) => console.log('Error terminating metrics', error))\\n      .finally(() => process.exit(0));\\n    });\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Define metrics and metric labels(dimensions) for the application\\nIn the following example application we demonstrate how to use the three types of metric instruments that\\nare available to record metrics: Counters, Gauges and Histograms.\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/reference/specification/metrics/api/#counter\"\n  }, \"Counters\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JavaScript\"\n  }, \"const metricsApi = require('@opentelemetry/api-metrics');\\nconst common_attributes = { signal: 'metric',  language: 'javascript', metricType: 'random' };\\n\\n// acquire meter \\nconst meter = metricsApi.metrics.getMeter('js-sample-app-meter');\\n\\n// synchronous counter metric\\nconst counterExample = meter.createCounter('counter', {\\n    description: 'Creates a counter metric',\\n    unit: 's'\\n});\\n\\n// asynchronous updown counter metric\\nconst observableUpdownCounterExample = meter.createObservableUpDownCounter('updownCounter', {\\n    description: 'Creates an asynchronous updown counter metric',\\n    unit:'1'\\n});\\nobservableUpdownCounterExample.addCallback((measurement) => {measurement.observe(counterVar, common_attributes)});\\n\\n// updates updown counter\\nfunction updateObservableCounter() {\\n    counterVar += Math.random() * 100;\\n}\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/reference/specification/metrics/api/#asynchronous-gauge\"\n  }, \"Gauges\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JavaScript\"\n  }, \"const metricsApi = require('@opentelemetry/api-metrics');\\nconst common_attributes = { signal: 'metric',  language: 'javascript', metricType: 'random' };\\n\\n// acquire meter \\nconst meter = metricsApi.metrics.getMeter('js-sample-app-meter');\\n\\n// observable gauge metric\\nconst observableGaugeExample = meter.createObservableGauge('observableGauge', {\\n    description: 'Creates an observable gauge metric',\\n    unit: '1'\\n});\\nobservableGaugeExample.addCallback((measurement) => {measurement.observe(gaugeVar, common_attributes)});\\n\\n// updates observable gauge\\nfunction updateObservableGauge() {\\n    gaugeVar = Math.random() * 100;\\n}\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/reference/specification/metrics/api/#histogram\"\n  }, \"Histograms\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JavaScript\"\n  }, \"const metricsApi = require('@opentelemetry/api-metrics');\\n\\n// acquire meter \\nconst meter = metricsApi.metrics.getMeter('js-sample-app-meter');\\n\\nconst histogramExample = meter.createHistogram('histogram', {\\n    description: \\\"Creates a histogram metric.\\\",\\n    unit: 'ms'\\n});\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Send metrics\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JavaScript\"\n  }, \"const common_attributes = { signal: 'metric',  language: 'javascript', metricType: 'random' };\\n\\n// update metrics\\nsetInterval(() => {\\n    counterExample.add(1, common_attributes);\\n    updateObservableCounter();\\n    updateObservableGauge();\\n    histogramExample.record(Math.random() * 1000, common_attributes);\\n}, 1000);\\n\")), mdx(\"p\", null, \"These steps provided the sample code for applications to create application metrics.\"), mdx(\"p\", null, \"Please follow \", mdx(Link, {\n    to: \"/docs/getting-started/cloudwatch-metrics\",\n    mdxType: \"Link\"\n  }, \"Getting Started Sending CloudWatch Metrics with AWS OpenTelemetry\"), \"\\nto setup ADOT Collector for sending metrics to CloudWatch. Once ADOT Collector is installed to collect the metrics data.\\nYou should see the following metrics present on your CloudWatch Console.\"), mdx(\"img\", {\n    src: img2,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"Please stay tuned to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability\"\n  }, \"AWS Observability Repo\"), \" for more updates.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Requirements"},{"depth":2,"value":"Getting the SDK and Dependencies"},{"depth":2,"value":"Instrumenting Code"}]}},"pageContext":{"slug":"/docs/getting-started/js-sdk/metric-manual-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/js-sdk/metric-manual-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}