{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/ruby-sdk/trace-manual-instr",
    "result": {"data":{"mdx":{"id":"7f2a0508-d5c1-5eb9-befc-4b45f4f1c82c","excerpt":"Introduction With OpenTelemetry Ruby manual instrumentation, you configure the OpenTelemetry SDK within your application with just a few lines of codeâ€¦","fields":{"slug":"/docs/getting-started/ruby-sdk/trace-manual-instr/"},"frontmatter":{"title":"Tracing with the AWS Distro for OpenTelemetry Ruby SDK and X-Ray","description":"OpenTelemetry provides several language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Ruby SDK for traces and metrics instrumentation in the application...","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Tracing with the AWS Distro for OpenTelemetry Ruby SDK and X-Ray\",\n  \"description\": \"OpenTelemetry provides several language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Ruby SDK for traces and metrics instrumentation in the application...\",\n  \"path\": \"/docs/getting-started/ruby-sdk/trace-manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"With OpenTelemetry Ruby manual instrumentation, you configure the OpenTelemetry SDK within your application with just a few lines of code. OpenTelemetry Ruby then automatically produces trace spans with telemetry data describing the values used by the Ruby gems in your application. This telemetry data can then be exported to a backend like AWS X-Ray using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry::Propagator::XRay::IDGenerator\"), \" found in the ADOT Ruby \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-propagator-xray\"), \" gem. We also strongly recommend using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry::Propagator::XRay::TextMapPropagator\"), \" propagator found in the same gem to support propagating the trace context across AWS services. This propagator handles the extraction and injecting of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader\"\n  }, \"AWS X-Ray Tracing header\"), \" for requests from or to remote services.\"), mdx(\"p\", null, \"In this guide, we walk through the steps needed to trace an application with manual instrumentation.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, \"Ruby 2.5 or later is required to run an application using OpenTelemetry according to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/instrumentation/ruby/getting_started/#requirements\"\n  }, \"the OpenTelemetry Ruby Documentation\"), \".\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\"), \" running to export traces to X-Ray.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"If you are using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://bundler.io/\"\n  }, \"bundler\"), \", include the following gems in your Ruby application's Gemfile:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"gem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-sdk'\\n\\ngem 'opentelemetry-propagator-xray'\\n\")), mdx(\"p\", null, \"Or, install them directly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ gem install opentelemetry-exporter-otlp \\\\\\n              opentelemetry-sdk \\\\\\n              opentelemetry-propagator-xray\\n\")), mdx(\"p\", null, \"Next, we'll use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundler\"), \" to install gems that automatically instrument your application code.\"), mdx(\"p\", null, \"OpenTelemetry Ruby distributes many gems that instrument well-known Ruby dependencies. You need to install the relevant instrumentation package for every dependency you want to generate traces for. To see supported gems, check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/registry/?s=ruby&component=instrumentation\"\n  }, \"OpenTelemetry Registry\"), \".\"), mdx(\"p\", null, \"For example, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundler\"), \" and add the follow instrumentation gems to your Gemfile:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"gem 'opentelemetry-instrumentation-faraday', '~> 0.19'\\ngem 'opentelemetry-instrumentation-rails', '~> 0.20'\\n\")), mdx(\"p\", null, \"Or, install them directly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ gem install opentelemetry-instrumentation-faraday -v '~> 0.19' \\\\\\n              opentelemetry-instrumentation-rails -v '~> 0.20'\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-up-the-global-tracer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setting-up-the-global-tracer\",\n    \"aria-label\": \"setting up the global tracer permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting up the Global Tracer\"), mdx(\"h3\", {\n    \"id\": \"sending-traces-to-aws-x-ray\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sending-traces-to-aws-x-ray\",\n    \"aria-label\": \"sending traces to aws x ray permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sending Traces to AWS X-Ray\"), mdx(\"p\", null, \"Manual Instrumentation with OpenTelemetry Ruby involves configuring the OpenTelemetry Ruby SDK. Below we discuss different methods you have for configuring the OpenTelemetry Ruby SDK.\"), mdx(\"h4\", {\n    \"id\": \"basic-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#basic-configuration\",\n    \"aria-label\": \"basic configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Basic Configuration\"), mdx(\"p\", null, \"This section describes recommended configuration to initialize OpenTelemetry Ruby SDK for tracing with AWS X-Ray.\"), mdx(\"p\", null, \"For a ruby on rails application, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/instrumentation/ruby/getting_started/#initialization\"\n  }, \"OpenTelemetry Ruby Initialization Documentation\"), \" recommends placing your configuration code in a Rails initializer. ADOT provides a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-ruby/blob/main/sample-apps/manual-instrumentation/ruby-on-rails/config/initializers/opentelemetry.rb\"\n  }, \"working example of such an initializer in our sample app repo\"), \".\"), mdx(\"p\", null, \"In a Ruby on Rails app, you will not need to require packages in your application code because of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://guides.rubyonrails.org/getting_started.html#autoloading\"\n  }, \"autoloading\"), \". This assumes you are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundler\"), \" and a Gemfile. Otherwise, if you included the gems with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require: false\"), \" option or you are not using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundler\"), \", you will need to \\\"require\\\" the gems distributed by OpenTelemetry manually.\"), mdx(\"p\", null, \"For all manually instrumented Ruby programs, you must use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry::SDK.configure\"), \" method below to configure the OpenTelemetry Ruby SDK.\"), mdx(\"p\", null, \"The default OpenTelemetry OTLP Exporter with the Batch Processor is a great way to group traces and export them in a way that the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\"), \" can receive them.\"), mdx(\"p\", null, \"Additionally, using the X-Ray ID Generator is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"required\"), \" to make your OpenTelemetry traces appear in X-Ray, while the X-Ray Propagator is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"strongly recommended\"), \" in order to inject and extract the X-Ray Tracing header for downstream requests made by your application.\"), mdx(\"p\", null, \"Putting this all together, we come up with the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"# Basic packages for your application\\nrequire 'aws-sdk'\\nrequire 'faraday'\\n\\n# Add imports for OTel components into the application\\nrequire 'opentelemetry-api'\\nrequire 'opentelemetry-exporter-otlp'\\nrequire 'opentelemetry-sdk'\\n\\n# Import the gem containing the AWS X-Ray for OTel Ruby ID Generator and propagator\\nrequire 'opentelemetry-propagator-xray'\\n\\n# Configure OpenTelmetry Ruby SDK\\nOpenTelemetry::SDK.configure do |c|\\n  # Set the service name to identify your application in the X-Ray backend service map\\n  c.service_name = 'aws-otel-manual-rails-sample'\\n\\n  c.span_processors = [\\n      # Use the BatchSpanProcessor to send traces in groups instead of one at a time\\n      Trace::Export::BatchSpanProcessor.new(\\n          # Use the default OLTP Exporter to send traces to the ADOT Collector\\n          OpenTelemetry::Exporter::OTLP::Exporter.new(\\n            # The ADOT Collector is running as a sidecar and listening on port 4318\\n            endpoint=\\\"http://localhost:4318\\\"\\n          )\\n      )\\n    ]\\n\\n  # The X-Ray ID Generator generates spans with X-Ray backend compliant IDs\\n  c.id_generator = OpenTelemetry::Propagator::XRay::IDGenerator\\n\\n  # The X-Ray Propagator injects the X-Ray Tracing Header into downstream calls\\n  c.propagators = [OpenTelemetry::Propagator::XRay::TextMapPropagator.new]\\nend\\n\")), mdx(\"p\", null, \"With this, your Ruby application has configured OpenTelemetry Ruby for compatibility with the AWS X-Ray service! To automatically trace popular Ruby gems, jump to the next section to learn about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#instrumenting-an-application\"\n  }, \"instrumenting with OpenTelemetry Ruby Instrumentations\"), \".\"), mdx(\"h4\", {\n    \"id\": \"advanced-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#advanced-configuration\",\n    \"aria-label\": \"advanced configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Advanced Configuration\"), mdx(\"p\", null, \"From above, we learned that configuring OpenTelemetry Ruby required specifying 3 core steps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"which Exporter to use to export to the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"which ID Generator to use to generate Trace IDs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"which Propagator to use to propagate Trace Context to downstream calls\")), mdx(\"p\", null, \"By default, OpenTelemetry Ruby SDK \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-ruby/tree/main/exporter/otlp#how-do-i-get-started\"\n  }, \"is already configured to initialize an OTLP exporter\"), \". The exporter can also be completely \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-ruby/tree/main/exporter/otlp#how-can-i-configure-the-otlp-exporter\"\n  }, \"configured using environment variables\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"export OTEL_TRACES_EXPORTER=otlp\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_EXPORTER_OTLP_ENDPOINT\"), \" value allows you to set the address that the exporter will use to connect to the collector. If unset, the SDK will try to connect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4318\"), \" by default. Note that because the scheme is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" by default, you have to explicitly set it to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https\"), \" if necessary.\"), mdx(\"p\", null, \"If the Collector the application will connect to is running without TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" scheme is used to disable client transport security for the OTLP exporter's connection. This option should never be used in production, non-sidecar deployments.\"), mdx(\"p\", null, \"If the Collector the application will connect to is running with TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https\"), \" scheme and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"certificate_file=/path/to/cert.pem\"), \" argument should be used to give a path to credentials that allow the application to establish a secure connection for the app's exporter. The credentials at this path should be the public certificate of the collector, or one of its root certificates.\"), mdx(\"p\", null, \"Next, because the AWS X-Ray ID Generator can only be configured through code, you cannot use an environment variable to select it. The ID Generator must be used at the time OpenTelemetry Ruby SDK is configured.\"), mdx(\"p\", null, \"Finally, to allow the span context to propagate downstream when the application makes calls to external services, configure the global propagator to use the AWS X-Ray Propagator.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_PROPAGATORS\"), \" environment variable can be configured to have the OpenTelemetry Ruby SDK automatically find and initialize the propagator.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"export OTEL_PROPAGATORS=xray\\n\")), mdx(\"p\", null, \"The propagator should be configured as soon as possible in your application's code so that subsequent downstream requests get the OpenTelemetry trace context injected into its HTTP headers. This is what allows your traces to be connected and for you to see a complete Service Graph in the X-Ray console.\"), mdx(\"p\", null, \"Likewise, configuring the X-Ray Propagator means incoming requests to your application can parse out an OpenTelemetry Trace context and use the same Trace ID to pick up tracing where the upstream service left off.\"), mdx(\"p\", null, \"You can combine the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xray\"), \" propagator with other propagators like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracecontext\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b3\"), \" just fine, but it is recommended you put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xray\"), \" last because the propagator later in the list will override previous propagators.\"), mdx(\"h3\", {\n    \"id\": \"configuring-sampling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#configuring-sampling\",\n    \"aria-label\": \"configuring sampling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configuring Sampling\"), mdx(\"p\", null, \"By default, the OpenTelemetry Ruby SDK follows the parent span's sampling decision if it exists, and samples 100% of incoming requests otherwise. This is known as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parentbased_always_on\"), \" sampler.\"), mdx(\"h4\", {\n    \"id\": \"reduce-sampling-rate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#reduce-sampling-rate\",\n    \"aria-label\": \"reduce sampling rate permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Reduce Sampling Rate\"), mdx(\"p\", null, \"To reduce the sampling rate, configure OpenTelemetry Ruby SDK to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parentbased_traceidratio\"), \" sampler. This can be configured using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-specification/blob/7b504383f53b02b10f62ef78fa008fdfd18c633e/specification/sdk-environment-variables.md#general-sdk-configuration\"\n  }, \"the OpenTelemetry Specification defined environment variables\"), \". For instance, to reduce the sampling rate to 10% of requests, set the following environment variables:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"export OTEL_TRACES_SAMPLER=parentbased_traceidratio\\nexport OTEL_TRACES_SAMPLER_ARG=0.10\\n\")), mdx(\"p\", null, \"Alternatively, this can be set on the global TracerProvider after the OpenTelemetry Ruby SDK has been configured:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"OpenTelemetry.tracer_provider.sampler = Samplers.parent_based(root: Samplers.trace_id_ratio_based(0.10))\\n\")), mdx(\"p\", null, \"Currently, OpenTelemetry Ruby does not support centralized sampling.\"), mdx(\"h3\", {\n    \"id\": \"debug-logging\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#debug-logging\",\n    \"aria-label\": \"debug logging permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Debug Logging\"), mdx(\"p\", null, \"By default, OpenTelemetry Ruby SDK logs at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info\"), \" level. Its level can be configured using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_LOG_LEVEL\"), \" environment variable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"export OTEL_LOG_LEVEL=debug\\n\")), mdx(\"p\", null, \"Separate from OpenTelemetry, you can use code and set the Base Logger to modify the logging level throughput your application.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"ActiveJob::Base.logger = Logger.new(STDOUT, level=Logger::DEBUG)\\n\")), mdx(\"p\", null, \"Additionally, you can create your own logger that logs at the log level you set.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"require 'logger'\\n\\nlogger = Logger.new(STDOUT)\\nlogger.level = Logger::WARN\\n\\nlogger.warn(\\\"This log message is visible!\\\")\\nlogger.debug(\\\"This one is not.\\\")\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-an-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#instrumenting-an-application\",\n    \"aria-label\": \"instrumenting an application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting an Application\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning: Some instrumentations are not yet stable and the attributes they collect are subject to change until the instrumentation reaches 1.0 stability. It is recommended to pin a specific version of an instrumentation\")), mdx(\"p\", null, \"OpenTelemetry provides a wide range of instrumentations for popular Ruby libraries such as Rails, Sinatra, Faraday, the AwsSdk and many more. Instrumenting a library means that every time the library is used to make or handle a request, that library call is automatically wrapped with a populated span contain the relevant values that were used. Web framework, downstream HTTP, SQL, gRPC, and other requests can all be recorded using OpenTelemetry.\"), mdx(\"p\", null, \"A full list of supported instrumentation packages and configuration instructions can be found on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-ruby/tree/main/instrumentation\"\n  }, \"instrumentation folder of the OpenTelemetry Ruby repo\"), \".\"), mdx(\"p\", null, \"To enable tracing of the calls made by your package dependencies, you need to include the relevant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentation\"), \" classes during OpenTelemetry Ruby SDK initialization. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentation\"), \"s have individual initialization configurability, so refer to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentation\"), \"'s documentation for configuration details.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"OpenTelemetry::SDK.configure do |c|\\n  c.use 'OpenTelemetry::Instrumentation::Rails'\\n  c.use 'OpenTelemetry::Instrumentation::Rack'\\n  c.use 'OpenTelemetry::Instrumentation::ActionPack'\\n  c.use 'OpenTelemetry::Instrumentation::ActiveSupport'\\n  c.use 'OpenTelemetry::Instrumentation::ActionView'\\n  # c.use 'OpenTelemetry::Instrumentation::ActiveRecord'\\n\\n  c.use 'OpenTelemetry::Instrumentation::Faraday'\\nend\\n\")), mdx(\"p\", null, \"Alternatively, you can enable all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentation\"), \"s which have been downloaded for this Ruby project. Not that you still need to download the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentation\"), \" gem for it to be initialized in the OpenTelemetry Ruby SDK.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"OpenTelemetry::SDK.configure do |c|\\n  c.use_all()\\nend\\n\")), mdx(\"h3\", {\n    \"id\": \"instrumenting-the-aws-sdk\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#instrumenting-the-aws-sdk\",\n    \"aria-label\": \"instrumenting the aws sdk permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting the AWS SDK\"), mdx(\"p\", null, \"To instrument the AWS Ruby SDK and its dependencies, install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-instrumentation-aws_sdk\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://rubygems.org/gems/opentelemetry-instrumentation-aws_sdk\"\n  }, \"OpenTelemetry Ruby Instrumentation gem for the AWS SDK\"), \".\"), mdx(\"p\", null, \"If you are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundler\"), \", you can include it in in the Gemfile.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"gem 'opentelemetry-instrumentation-aws_sdk', '~> 0.2.1'\\n\")), mdx(\"p\", null, \"Otherwise you can install it directly using your shell.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ gem install opentelemetry-instrumentation-aws_sdk -v '~> 0.2.1'\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE:\"), \" Since these instrumentations are not yet stable, we recommend installing it at a pinned version.\"), mdx(\"p\", null, \"To instrument requests made to services with the AWS SDK, configure the Ruby SDK as shown. We set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"suppress_internal_instrumentation\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" because we want calls that go into the AWS SDK to be terminal requests without tracing underlying HTTP calls and other things which would make the trace noise-y.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"OpenTelemetry::SDK.configure do |c|\\n  c.use 'OpenTelemetry::Instrumentation::AwsSdk', {\\n    suppress_internal_instrumentation: true\\n  }\\nend\\n\")), mdx(\"p\", null, \"For more information refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-ruby/tree/main/instrumentation/aws_sdk\"\n  }, \"the upstream documentation for OpenTelemetry Ruby AWS SDK Instrumentation\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-instrumentation\",\n    \"aria-label\": \"custom instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom Instrumentation\"), mdx(\"h3\", {\n    \"id\": \"creating-custom-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-custom-spans\",\n    \"aria-label\": \"creating custom spans permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Custom Spans\"), mdx(\"p\", null, \"You can use custom spans to monitor the performance of internal activities that are not captured by instrumentation libraries. Note that only spans of kind \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Server\"), \" are converted into X-Ray segments, all other spans are converted into X-Ray subsegments. For more on segments and subsegments, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-segments\"\n  }, \"AWS X-Ray developer guide\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"require 'aws-sdk'\\nrequire 'opentelemetry-api'\\n\\n# Get a tracer from the Global Tracer Provider\\ntracer = OpenTelemetry.tracer_provider.tracer('my-tracer')\\n\\ntracer.in_span('Root Span', kind: :server) do |root_span|\\n\\n    p 'Started a root span, this will be a segment in the X-Ray console'\\n\\n    tracer.in_span('Child Span') do |child_span|\\n\\n        p 'Started a child span, this will be a subsegment in the X-Ray console'\\n\\n        ec2_client = Aws::EC2::Client.new\\n        result = ec2_client.describe_instances\\n\\n        p \\\"EC2 Describe Instances: #{result}\\\"\\n\\n        p '<h1>Good job! Traces recorded!</h1>'\\n    end\\nend\\n\")), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/instrumentation/ruby/manual_instrumentation/#creating-new-spans\"\n  }, \"OpenTelemetry Ruby's own documentation on creating spans manually\"), \" for more information.\"), mdx(\"h3\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Adding custom attributes\"), mdx(\"p\", null, \"You can also add custom key-value pairs as attributes onto your spans. Attributes are converted to metadata by default. If you \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/7bf2266a025425993a233f66c77a0810ab11a78b/exporter/awsxrayexporter#exporter-configuration\"\n  }, \"configure your collector\"), \", you can convert some or all of the attributes to annotations. To read more about X-Ray annotations and metadata see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-annotations\"\n  }, \"AWS X-Ray Developer Guide\"), \".\"), mdx(\"p\", null, \"One way to add custom attributes is as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"require 'opentelemetry-api'\\n\\n# Get a tracer from the Global Tracer Provider\\ntracer = OpenTelemetry.tracer_provider.tracer('my-tracer')\\n\\ntracer.in_span('Root Span',\\n    attributes: {\\n        'hello' => 'world',\\n        'some.number' => 1024,\\n        'tags' => [\\n            'bug',\\n            'enhancement'\\n        ]\\n    },\\n    kind: :server) do |root_span|\\n\\n    p 'Started a root span'\\n\\n    span.set_attribute('my_attribute', 'foo')\\n    span.set_attribute('more_items', ['bar', 'baz'])\\n\\n    span.add_attributes({\\n        \\\"yet.another.attribute\\\" => \\\"attribute value\\\",\\n        \\\"and.another.one\\\" => \\\"has a value\\\"\\n    })\\nend\\n\")), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/docs/instrumentation/ruby/manual_instrumentation/#attributes\"\n  }, \"OpenTelemetry Ruby's own documentation on adding attributes to spans\"), \" for more information.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sample-application\",\n    \"aria-label\": \"sample application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sample Application\"), mdx(\"p\", null, \"See the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-ruby/blob/main/sample-apps/manual-instrumentation/ruby-on-rails\"\n  }, \"sample Ruby on Rails App using OpenTelemetry Ruby SDK Manual Instrumentation\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Setting up the Global Tracer"},{"depth":3,"value":"Sending Traces to AWS X-Ray"},{"depth":4,"value":"Basic Configuration"},{"depth":4,"value":"Advanced Configuration"},{"depth":3,"value":"Configuring Sampling"},{"depth":4,"value":"Reduce Sampling Rate"},{"depth":3,"value":"Debug Logging"},{"depth":2,"value":"Instrumenting an Application"},{"depth":3,"value":"Instrumenting the AWS SDK"},{"depth":2,"value":"Custom Instrumentation"},{"depth":3,"value":"Creating Custom Spans"},{"depth":3,"value":"Adding custom attributes"},{"depth":2,"value":"Sample Application"}]}},"pageContext":{"slug":"/docs/getting-started/ruby-sdk/trace-manual-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/ruby-sdk/trace-manual-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}