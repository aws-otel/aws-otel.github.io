{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/python-sdk/manual-instr",
    "result": {"data":{"mdx":{"id":"bf4a9bba-c6d5-5c23-b412-55e8be3ab200","excerpt":"Introduction With OpenTelemetry Python manual instrumentation, you configure the OpenTelemetry SDK within your application's code. It automatically producesâ€¦","fields":{"slug":"/docs/getting-started/python-sdk/manual-instr/"},"frontmatter":{"title":"Tracing and Metrics with the AWS Distro for OpenTelemetry Python Manual-Instrumentation","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Python SDK for traces and metrics instrumentation in the application...","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Tracing and Metrics with the AWS Distro for OpenTelemetry Python Manual-Instrumentation\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Python SDK for traces and metrics instrumentation in the application...\",\n  \"path\": \"/docs/getting-started/python-sdk/manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"With OpenTelemetry Python manual instrumentation, you configure the OpenTelemetry SDK within your application's code. It automatically produces spans with telemetry data describing the values used by the Python frameworks in your application with only a few lines of code. This telemetry data can then be exported to a backend like AWS X-Ray using the ADOT Python \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-sdk-extension-aws\"), \" package. We also strongly recommend using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-propagator-aws-xray\"), \" package to support propagating the trace context across AWS services. This propagator handles the extraction and injecting of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader\"\n  }, \"AWS X-Ray Tracing header\"), \" for requests from or to remote services.\"), mdx(\"p\", null, \"In this guide, we walk through the steps needed to trace an application and produce metrics with manual instrumentation and produce metrics.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, \"Python 3.7 or later is required to run an application using OpenTelemetry.\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }, \"ADOT Collector\"), \" running to export traces and metrics.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Installation\"), mdx(\"p\", null, \"Install the following packages and their dependencies from OpenTelemetry Python using pip.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ pip install opentelemetry-sdk==1.11.1 \\\\\\n              opentelemetry-sdk-extension-aws~=2.0 \\\\\\n              opentelemetry-propagator-aws-xray~=1.0 \\\\\\n              opentelemetry-exporter-otlp==1.11.1 \\\\\\n\")), mdx(\"p\", null, \"OpenTelemetry Python distributes many packages, which provide instrumentation for well-known Python dependencies. You need to install the relevant instrumentation package for every dependency you want to generate traces for. To see supported frameworks and libraries, check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opentelemetry.io/registry/?s=python&component=instrumentation\"\n  }, \"OpenTelemetry Registry\"), \".\"), mdx(\"p\", null, \"For example, use pip to install the follow instrumentation libraries:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Supported instrumentation packages for the dependencies of the example above\\n$ pip install opentelemetry-instrumentation-flask==0.30b1 \\\\\\n              opentelemetry-instrumentation-requests==0.30b1\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-up-the-global-tracer-and-meter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#setting-up-the-global-tracer-and-meter\",\n    \"aria-label\": \"setting up the global tracer and meter permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setting up the Global Tracer and Meter\"), mdx(\"h3\", {\n    \"id\": \"sending-traces-and-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sending-traces-and-metrics\",\n    \"aria-label\": \"sending traces and metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sending Traces and Metrics\"), mdx(\"p\", null, \"As soon as possible in your application code, add imports for the OpenTelemetry packages installed above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"# Basic packages for your application\\nimport boto3\\nfrom flask import Flask\\nimport json\\n\\n# Add imports for OTel components into the application\\nfrom opentelemetry import trace, metrics\\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\\nfrom opentelemetry.metrics import CallbackOptions, Observation\\nfrom opentelemetry.sdk.trace import TracerProvider\\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\\nfrom opentelemetry.sdk.metrics import MeterProvider\\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\\nfrom opentelemetry.exporter.otlp.proto.grpc.metric_exporter import OTLPMetricExporter\\n\\n# Import the AWS X-Ray for OTel Python IDs Generator into the application.\\nfrom opentelemetry.sdk.extension.aws.trace import AwsXRayIdGenerator\\n\")), mdx(\"p\", null, \"Next, configure the Global Tracer Provider and Meter Provider to export to the ADOT Collector. The configuration of your SDK exporter depends on how you wish to connect with your configured ADOT Collector.\"), mdx(\"p\", null, \"Connecting to an ADOT Collector running as a sidecar, we can set up the TracerProvider as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"# Sends generated traces in the OTLP format to an ADOT Collector running on port 4317\\notlp_exporter = OTLPSpanExporter(endpoint=\\\"http://localhost:4317\\\")\\n# Processes traces in batches as opposed to immediately one after the other\\nspan_processor = BatchSpanProcessor(otlp_exporter)\\n# Configures the Global Tracer Provider\\ntrace.set_tracer_provider(TracerProvider(active_span_processor=span_processor, id_generator=AwsXRayIdGenerator()))\\n# Setting up Metrics\\nmetric_reader = PeriodicExportingMetricReader(exporter=OTLPMetricExporter())\\nmetric_provider = MeterProvider(metric_readers=[metric_reader])\\nmetrics.set_meter_provider(metric_provider)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"endpoint=\"), \" argument allows you to set the address that the exporter will use to connect to the collector. If unset, the SDK will try to connect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4317\"), \" by default. Note that because the scheme is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" by default, you have to explicitly set it to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https\"), \" if necessary.\"), mdx(\"p\", null, \"If the Collector the application will connect to is running without TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" scheme is used to disable client transport security for our OTLP exporter\\u2019s connection. This will use the gRPC \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insecure_channel()\"), \" method as explained in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://grpc.github.io/grpc/python/grpc.html?highlight=insecure#grpc.insecure_channel\"\n  }, \"gRPC Python Documentation\"), \". This option should never be used in production, non-sidecar deployments.\"), mdx(\"p\", null, \"If the Collector the application will connect to is running with TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https\"), \" scheme and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"credentials=/path/to/cert.pem\"), \" argument should be used to give a path to credentials that allow the application to establish a secure connection for the app\\u2019s exporter. The credentials at this path should be the public certificate of the collector, or one of its root certificates. If no certificate is found, the gRPC method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssl_channel_credentials()\"), \" will attempt to \\u201Cretrieve the PEM-encoded root certificates from a default location chosen by gRPC runtime\\u201D as explained in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://grpc.github.io/grpc/python/grpc.html?highlight=ssl_channel_credentials\"\n  }, \"gRPC Python Documentation\"), \".\"), mdx(\"p\", null, \"Instead of setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IdGenerator\"), \" of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" in code, you can also set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IdGenerator\"), \" using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_PYTHON_ID_GENERATOR\"), \" environment variable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OTEL_PYTHON_ID_GENERATOR=xray\\n\")), mdx(\"p\", null, \"To allow the span context to propagate downstream when the application makes calls to external services, configure the global propagator to use the AWS X-Ray Propagator, which is found in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-propagator-aws-xray\"), \" package. You can set the global propagator in code, and should configure the propagator as soon as possible in your application's code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"from opentelemetry import propagate\\nfrom opentelemetry.propagators.aws import AwsXRayPropagator\\npropagate.set_global_textmap(AwsXRayPropagator())\\n\")), mdx(\"p\", null, \"Alternatively, set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_PROPAGATORS\"), \" environment variable to achieve the same result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OTEL_PROPAGATORS=xray\\n\")), mdx(\"h3\", {\n    \"id\": \"using-the-aws-resource-detectors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-the-aws-resource-detectors\",\n    \"aria-label\": \"using the aws resource detectors permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using the AWS resource Detectors\"), mdx(\"p\", null, \"When you install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-sdk-extension-aws\"), \", you automatically get AWS Resource Detectors in the same package. Use the provided \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Resource Detectors\"), \" to automatically populate attributes under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" namespace of each generated span.\"), mdx(\"p\", null, \"The ADOT Python SDK supports automatically recording metadata in EC2, Elastic Beanstalk, ECS, and EKS environments.\"), mdx(\"p\", null, \"For example, if tracing with OpenTelemetry on an Amazon EC2 instance, you can automatically populate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" attributes by creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TraceProvider\"), \" using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AwsEc2ResourceDetector\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"import opentelemetry.trace as trace\\nfrom opentelemetry.sdk.trace import TracerProvider\\nfrom opentelemetry.sdk.extension.aws.resource.ec2 import (\\n    AwsEc2ResourceDetector,\\n)\\nfrom opentelemetry.sdk.resources import get_aggregated_resources\\n\\ntrace.set_tracer_provider(\\n    TracerProvider(\\n        resource=get_aggregated_resources(\\n            [\\n                AwsEc2ResourceDetector(),\\n            ]\\n        ),\\n    )\\n)\\n\")), mdx(\"p\", null, \"To see what attributes are captured and how to add other resource detectors, refer to each detectors' docstring in the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-python-contrib/blob/main/sdk-extension/opentelemetry-sdk-extension-aws\"\n  }, \"OpenTelemetry SDK Extension for AWS\"), \"\\nto determine any requirements for that detector.\"), mdx(\"h3\", {\n    \"id\": \"debug-logging\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#debug-logging\",\n    \"aria-label\": \"debug logging permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Debug Logging\"), mdx(\"p\", null, \"You can expose better debug logging by modifying the log level for the OpenTelemetry packages your application is using.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"import logging\\n\\nlogging.basicConfig(\\n    format=\\\"%(asctime)s %(levelname)-8s %(message)s\\\",\\n    level=logging.DEBUG,\\n    datefmt=\\\"%Y-%m-%d %H:%M:%S\\\",\\n)\\n\")), mdx(\"p\", null, \"Additionally, you can provide your own logger that uses the log level you set above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"logger = logging.getLogger(__file__)\\n\\nlogger.debug(\\\"My debug level log.\\\")\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-an-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#instrumenting-an-application\",\n    \"aria-label\": \"instrumenting an application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting an Application\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warning: Some instrumentations are not yet stable and the attributes they collect are subject to change until the instrumentation reaches 1.0 stability. It is recommended to pin a specific version of an instrumentation\")), mdx(\"p\", null, \"OpenTelemetry provides a wide range of instrumentations for popular python libraries such as Flask, Django, Redis, MySQL, PyMongo and many more. Instrumenting a library means that every time the library is used to make or handle a request, that library call is automatically wrapped with a populated span contain the relevant values that were used. Web framework, downstream HTTP, SQL, gRPC, and other requests can all be recorded using OpenTelemetry.\"), mdx(\"p\", null, \"A full list of supported instrumentation packages and configuration instructions can be found on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation\"\n  }, \"OpenTelemetry Python Contrib repo\"), \".\"), mdx(\"p\", null, \"To enable tracing of the calls made by your package dependencies, you need to import and initialize the relevant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentor\"), \" classes. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentor\"), \"s have individual\\ninitialization requirements, so refer to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Instrumentor\"), \"\\u2019s package documentation for configuration details.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"from opentelemetry.instrumentation.requests import RequestsInstrumentor\\nfrom opentelemetry.instrumentation.flask import FlaskInstrumentor\\n\\n# Initialize `Instrumentor` for the `requests` library\\nRequestsInstrumentor().instrument()\\n# Initialize `Instrumentor` for the `flask` web framework\\nFlaskInstrumentor().instrument_app(app)\\n\")), mdx(\"h3\", {\n    \"id\": \"instrumenting-the-aws-sdk\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#instrumenting-the-aws-sdk\",\n    \"aria-label\": \"instrumenting the aws sdk permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Instrumenting the AWS SDK\"), mdx(\"p\", null, \"To install the instrumentation library for the AWS SDK and its dependencies, run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pip install\"), \" command from below which applies to your application. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE:\"), \" Since these instrumentations are not yet stable, we recommend installing it at a pinned version.\"), mdx(\"p\", null, \"For instrumenting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boto\"), \" (AWS SDK V2) package:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ pip install opentelemetry-instrumentation-boto==0.30b1\\n\")), mdx(\"p\", null, \"For instrumenting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boto3\"), \" (AWS SDK V3) package (which depends on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"botocore\"), \" package):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ pip install opentelemetry-instrumentation-botocore==0.30b1\\n\")), mdx(\"p\", null, \"Instrumenting the AWS SDK is as easy as configuring the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BotoInstrumentor\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BotocoreInstrumentor\"), \" class. This should be done as soon as possible in your application so that subsequent calls using the SDK are wrapped by OpenTelemetry. This give OpenTelemetry the chance to record relevant information used by the SDK at the time of your application's call and export the information as spans.\"), mdx(\"p\", null, \"For instrumenting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boto\"), \" package:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"from opentelemetry.instrumentation.boto import BotoInstrumentor\\n\\n# Initialize `Instrumentor` for the `boto` library\\nBotoInstrumentor().instrument()\\n\")), mdx(\"p\", null, \"For instrumenting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boto3\"), \" package:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"from opentelemetry.instrumentation.botocore import BotocoreInstrumentor\\n\\n# Initialize `Instrumentor` for the `botocore` library\\nBotocoreInstrumentor().instrument()\\n\")), mdx(\"p\", null, \"For more information refer to the upstream documentation for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation/opentelemetry-instrumentation-boto\"\n  }, \"OpenTelemetry Python boto Instrumentation\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation/opentelemetry-instrumentation-botocore\"\n  }, \"OpenTelemetry Python botocore Instrumentation\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-instrumentation\",\n    \"aria-label\": \"custom instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom Instrumentation\"), mdx(\"h3\", {\n    \"id\": \"creating-custom-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-custom-spans\",\n    \"aria-label\": \"creating custom spans permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Custom Spans\"), mdx(\"p\", null, \"You can use custom spans to monitor the performance of internal activities that are not captured by instrumentation libraries. Note that only spans of kind \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Server\"), \" are converted into X-Ray segments, all other spans are converted into X-Ray subsegments. For more on segments and subsegments, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-segments\"\n  }, \"AWS X-Ray developer guide\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"import boto3\\nimport json\\nfrom opentelemetry import trace\\n\\n# Get a tracer from the Global Tracer Provider\\ntracer = trace.get_tracer(__name__)\\n\\nwith tracer.start_as_current_span(\\\"Root Span\\\", kind=trace.SpanKind.SERVER):\\n    print('Started a root span')\\n\\n    # This 'Child Span' will become an X-Ray subsegment.\\n    with tracer.start_span(\\\"Child Span\\\"):\\n\\n        print('Started a child span')\\n\\n        ec2_client = boto3.client('ec2')\\n        result = ec2_client.describe_instances()\\n\\n        print('EC2 Describe Instances: ', json.dumps(result, default=str, indent=4))\\n\\n        return '<h1>Good job! Traces recorded!</h1>'\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Adding custom attributes\"), mdx(\"p\", null, \"You can also add custom key-value pairs as attributes onto your spans. Attributes are converted to metadata by default. If you \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/7bf2266a025425993a233f66c77a0810ab11a78b/exporter/awsxrayexporter#exporter-configuration\"\n  }, \"configure your collector\"), \", you can convert some or all of the attributes to annotations. To read more about X-Ray annotations and metadata see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-annotations\"\n  }, \"AWS X-Ray Developer Guide\"), \".\"), mdx(\"p\", null, \"One way to add custom attributes is as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"from opentelemetry import trace\\n\\n# Get a tracer from the Global Tracer Provider\\ntracer = trace.get_tracer(__name__)\\n\\nwith tracer.start_as_current_span(\\n    \\\"Root Span\\\",\\n    kind=trace.SpanKind.SERVER) as span:\\n\\n    print('Started a root span')\\n\\n    span.set_attribute(\\\"my_attribute\\\", \\\"foo\\\")\\n\")), mdx(\"p\", null, \"Alternatively, you can do the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"from opentelemetry import trace\\n\\n# Get a tracer from the Global Tracer Provider\\ntracer = trace.get_tracer(__name__)\\n\\nwith tracer.start_as_current_span(\\n    \\\"Root Span\\\",\\n    kind=trace.SpanKind.SERVER) as span:\\n\\n    print('Started a root span')\\n\\n    current_span = trace.get_current_span()\\n    current_span.set_attribute(\\\"my_attribute\\\", \\\"foo\\\")\\n\")), mdx(\"h3\", {\n    \"id\": \"creating-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#creating-metrics\",\n    \"aria-label\": \"creating metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Metrics\"), mdx(\"p\", null, \"Similarly to Traces, you can create custom metrics in your application using the OpenTelemetry API and SDK.\"), mdx(\"p\", null, \"In the following example application we demonstrate how to use metric instruments to record metrics with a Counter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }, \"meter = metrics.get_meter(__name__)\\ntime_alive_counter = meter.create_counter(\\n            name=\\\"time_alive\\\",\\n            description=\\\"Total amount of time that the application has been alive\\\",\\n            unit='ms'\\n        )\\nwhile True:\\n    time_alive_counter.add(1, attributes={'a': '1'})\\n    time.Sleep(1)\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sample-application\",\n    \"aria-label\": \"sample application permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sample Application\"), mdx(\"p\", null, \"See a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-community/tree/master/sample-apps/python-manual-instrumentation-sample-app\"\n  }, \"Sample App using OpenTelemetry Python SDK Manual Instrumentation\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Setting up the Global Tracer and Meter"},{"depth":3,"value":"Sending Traces and Metrics"},{"depth":3,"value":"Using the AWS resource Detectors"},{"depth":3,"value":"Debug Logging"},{"depth":2,"value":"Instrumenting an Application"},{"depth":3,"value":"Instrumenting the AWS SDK"},{"depth":2,"value":"Custom Instrumentation"},{"depth":3,"value":"Creating Custom Spans"},{"depth":3,"value":"Adding custom attributes"},{"depth":3,"value":"Creating Metrics"},{"depth":2,"value":"Sample Application"}]}},"pageContext":{"slug":"/docs/getting-started/python-sdk/manual-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/python-sdk/manual-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}