{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/container-insights/eks-fargate",
    "result": {"data":{"mdx":{"id":"aab2246e-26ca-5f61-8472-770fb5c7a2e4","excerpt":"This section shows the design of components in an ADOT Collector pipeline that enables the collection of Container Insights metrics from EKS Fargate workloadsâ€¦","fields":{"slug":"/docs/getting-started/container-insights/eks-fargate/"},"frontmatter":{"title":"Container Insights EKS Fargate","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Container Insights EKS Fargate\",\n  \"path\": \"/docs/getting-started/container-insights/eks-fargate\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This section shows the design of components in an ADOT Collector pipeline that enables the collection of Container Insights metrics from EKS Fargate workloads and explains how to configure and deploy an ADOT Collector to collect system metrics from workloads deployed to an EKS Fargate cluster and send them to CloudWatch.\"), mdx(\"h2\", {\n    \"id\": \"design-of-container-insights-support-in-adot-collector-for-eks-fargate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#design-of-container-insights-support-in-adot-collector-for-eks-fargate\",\n    \"aria-label\": \"design of container insights support in adot collector for eks fargate permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Design of Container Insights support in ADOT Collector for EKS Fargate\"), mdx(\"img\", {\n    src: designImg,\n    alt: \"cloudwatch console log\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"The kubelet on a worker node in a Kubernetes cluster exposes resource metrics such as CPU, memory, disk, and network usage at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/metrics/cadvisor\"), \" endpoint. However, in EKS Fargate networking architecture, a pod is not allowed to directly reach the kubelet on that worker node. Hence, the ADOT Collector calls the Kubernetes API Server to proxy the connection to the kubelet on a worker node, and collect kubelet\\u2019s cAdvisor metrics for workloads on that node. These metrics are made available in Prometheus format. Therefore, the collector uses an instance of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver\"\n  }, \"Prometheus Receiver\"), \" as a drop-in replacement for a Prometheus server and scrapes these metrics from the Kubernetes API server endpoint. Using Kubernetes service discovery, the receiver can discover the worker nodes in an EKS cluster based on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"role\"), \" configured to discover targets, see here: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config\"\n  }, \"kubernetes_sd_configs\"), \". Hence, a single collector is able to discover all worker nodes in an EKS cluster.\"), mdx(\"p\", null, \"The metrics then go through a series of processors that perform filtering, renaming, data aggregation and conversion etc. The following is the list of processors used in the pipeline of an ADOT Collector instance for EKS Fargate illustrated above.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor\"\n  }, \"Filter Processor\"), \" to include or exclude metrics based on their name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/metricstransformprocessor\"\n  }, \"Metrics Transform Processor\"), \" to rename metrics as well as perform aggregations on metrics across labels\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/cumulativetodeltaprocessor\"\n  }, \"Cumulative to Delta Processor\"), \" to convert cumulative sum metrics to delta sums.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/deltatorateprocessor\"\n  }, \"Delta to Rate Processor\"), \" to convert delta sum metrics to rate metrics. This rate is a gauge.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/metricsgenerationprocessor\"\n  }, \"Metrics Generation Processor\"), \" to create new metrics using existing metrics\")), mdx(\"p\", null, \"The final component in the pipeline is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/awsemfexporter\"\n  }, \"AWS CloudWatch EMF Exporter\"), \" which converts the metrics to embedded metric format (EMF) and then sends them directly to CloudWatch Logs using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\"\n  }, \"PutLogEvents\"), \" API.\"), mdx(\"p\", null, \"The following list of pod metrics is sent to CloudWatch by the ADOT Collector for each of the workloads running on EKS Fargate. Other data points will still be sent to CloudWatch as raw CloudWatch logs but not in Metric format.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_cpu_utilization_over_pod_limit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_cpu_usage_total\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_cpu_limit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_memory_utilization_over_pod_limit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_memory_working_set\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_memory_limit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_network_rx_bytes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pod_network_tx_bytes\")), mdx(\"p\", null, \"Each metric will be associated with the following three dimension sets and collected under the CloudWatch namespace named ContainerInsights.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ClusterName, LaunchType\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ClusterName, Namespace, LaunchType\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ClusterName, Namespace, PodName, LaunchType\")), mdx(\"h2\", {\n    \"id\": \"deploying-adot-collector-to-eks-fargate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#deploying-adot-collector-to-eks-fargate\",\n    \"aria-label\": \"deploying adot collector to eks fargate permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Deploying ADOT Collector to EKS Fargate\"), mdx(\"p\", null, \"Let\\u2019s get into the details of deploying the ADOT Collector in an EKS Fargate cluster and then collecting metrics data from workloads.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"List of pre-requisites for deploying the ADOT Collector.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An EKS cluster that supports Kubernetes version 1.21 or higher. You may create the EKS cluster using one of the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html\"\n  }, \"approaches outlined here\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When your cluster creates pods on AWS Fargate, the components that run on the Fargate infrastructure must make calls to AWS APIs on your behalf. This is so that they can execute actions such as pull container images from Amazon ECR. The \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html\"\n  }, \"EKS pod execution role\"), \" provides the IAM permissions to do this. Create a Fargate pod execution role as \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/eks/latest/userguide/fargate-getting-started.html#fargate-sg-pod-execution-role\"\n  }, \"outlined here\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Before you can schedule pods running on Fargate, you must define a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/eks/latest/userguide/fargate-profile.html\"\n  }, \"Fargate profile\"), \" that specifies which pods should use Fargate when they are launched. For the sample deployments used here, we create two Fargate profiles as \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/eks/latest/userguide/fargate-getting-started.html#fargate-gs-create-profile\"\n  }, \"outlined here\"), \".  The first Fargate profile is named fargate-container-insights, specifying the namespace fargate-container-insights. The second one is named applications, specifying the namespace golang.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The ADOT Collector requires IAM permissions to send performance log events to CloudWatch. This is done by associating a Kubernetes service account with an IAM role using the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html\"\n  }, \"IAM Roles for Service Accounts (IRSA)\"), \" feature supported by EKS. The IAM role should be associated with the AWS managed policy \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CloudWatchAgentServerPolicy\"), \". The helper script shown below may be used, after substituting the CLUSTER_NAME and REGION variables, to create an IAM role named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"EKS-ADOT-ServiceAccount-Role\"), \" that is granted these permissions and is associated with a Kubernetes service account named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"adot-collector\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"##!/bin/bash\\nCLUSTER_NAME=YOUR-EKS-CLUSTER-NAME\\nREGION=YOUR-EKS-CLUSTER-REGION\\nSERVICE_ACCOUNT_NAMESPACE=fargate-container-insights\\nSERVICE_ACCOUNT_NAME=adot-collector\\nSERVICE_ACCOUNT_IAM_ROLE=EKS-Fargate-ADOT-ServiceAccount-Role\\nSERVICE_ACCOUNT_IAM_POLICY=arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\\n\\neksctl utils associate-iam-oidc-provider \\\\\\n--cluster=$CLUSTER_NAME \\\\\\n--approve\\n\\neksctl create iamserviceaccount \\\\\\n--cluster=$CLUSTER_NAME \\\\\\n--region=$REGION \\\\\\n--name=$SERVICE_ACCOUNT_NAME \\\\\\n--namespace=$SERVICE_ACCOUNT_NAMESPACE \\\\\\n--role-name=$SERVICE_ACCOUNT_IAM_ROLE \\\\\\n--attach-policy-arn=$SERVICE_ACCOUNT_IAM_POLICY \\\\\\n--approve\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deploy the ADOT Collector as a Kubernetes StatefulSet using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-collector/blob/main/deployment-template/eks/otel-fargate-container-insights.yaml\"\n  }, \"eks-fargate-container-insights.yaml\"), \" after replacing the placeholder variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"YOUR-EKS-CLUSTER-NAME\"), \" in the manifest with the name of your EKS cluster and replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"region=us-east-1\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"emfexporter\"), \" if you are not using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"us-east-1\"), \" region.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deploy a sample stateless workload to the cluster with the following deployment manifest.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: webapp\\n  namespace: golang\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app: webapp\\n      role: webapp-service\\n  template:\\n    metadata:\\n      labels:\\n        app: webapp\\n        role: webapp-service\\n      annotations:\\n        prometheus.io/scrape: 'true'\\n        prometheus.io/port: '3000'\\n        prometheus.io/path: '/metrics'\\n    spec:\\n      containers:\\n        - name: go\\n          image: public.ecr.aws/awsvijisarathy/prometheus-webapp:latest\\n          imagePullPolicy: Always\\n          resources:\\n            requests:\\n              cpu: \\\"256m\\\"\\n              memory: \\\"512Mi\\\"\\n            limits:\\n              cpu: \\\"512m\\\"\\n              memory: \\\"1024Mi\\\"\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The above deployments are both targeting a namespace associated with a Fargate profile and hence the workloads will be scheduled to run on Fargate. It may take a couple of minutes for a Fargate worker node to be provisioned for each of these workloads and for the pods to reach a Ready status. Executing the command\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"kubectl get nodes -l eks.amazonaws.com/compute-type=fargate\"), \" should now list the Fargate worker nodes named with the prefix fargate. Verify that the ADOT Collector and the workload pods are all running using the following commands:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"kubectl get pods -n fargate-container-insights\\nkubectl get pods -n golang\\n\")), mdx(\"h2\", {\n    \"id\": \"visualizing-eks-fargate-resource-metrics-using-cloudwatch-container-insights\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#visualizing-eks-fargate-resource-metrics-using-cloudwatch-container-insights\",\n    \"aria-label\": \"visualizing eks fargate resource metrics using cloudwatch container insights permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Visualizing EKS Fargate resource metrics using CloudWatch Container Insights\"), mdx(\"p\", null, \"The performance log events for the workloads will be found under the log group named\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/aws/containerinsights/CLUSTER_NAME/performance\"), \" as shown below. A separate log stream is created for each pod running on Fargate.\"), mdx(\"img\", {\n    src: performanceImg,\n    alt: \"cloudwatch console log\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"Shown below is a representative example of the JSON data with embedded metric format contained in one of the log events that identifies the data as pertaining to the metrics named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pod_cpu_usage_total\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pod_cpu_utilization_over_pod_limit\"), \".\"), mdx(\"img\", {\n    src: logEventImg,\n    alt: \"cloudwatch console log\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"Shown below is a graph of the same metric \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pod_cpu_utilization_over_pod_limit\"), \" seen in the CloudWatch metrics dashboard.\"), mdx(\"img\", {\n    src: ADOTMetricsImg,\n    alt: \"cloudwatch console log\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"The metrics may also be visualized using the prebuilt Container Insights dashboards that display data at the cluster, node, namespace, service and pod level. Shown below is a view of the dashboard displaying EKS Fargate metrics at the cluster level.\"), mdx(\"img\", {\n    src: clusterImg,\n    alt: \"cloudwatch console log\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Design of Container Insights support in ADOT Collector for EKS Fargate"},{"depth":2,"value":"Deploying ADOT Collector to EKS Fargate"},{"depth":2,"value":"Visualizing EKS Fargate resource metrics using CloudWatch Container Insights"}]}},"pageContext":{"slug":"/docs/getting-started/container-insights/eks-fargate/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/container-insights/eks-fargate.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}