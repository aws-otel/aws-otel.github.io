{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/docs/getting-started/lambda/lambda-java-auto-instr",
    "result": {"data":{"mdx":{"id":"c928fd40-d2e4-5d32-be0c-7bb613741287","excerpt":"The AWS managed Lambda layer for ADOT Java Auto-instumentation Agent provides a plug-and-play user experience by automatically instrumenting a Lambda functionâ€¦","fields":{"slug":"/docs/getting-started/lambda/lambda-java-auto-instr/"},"frontmatter":{"title":"AWS Distro for OpenTelemetry Lambda Support For Java (Auto-instrumentation Agent)","description":"The AWS managed Lambda layer for ADOT Java Auto-instrumentation Agent provides a plug-and-play user experience by automatically instrumenting a AWS Lambda function, by packaging either the ADOT Java Agent (https://aws-otel.github.io/docs/getting-started/java-sdk/trace-auto-instr) or OpenTelemetry Java SDK (https://aws-otel.github.io/docs/getting-started/java-sdk/trace-manual-instr)together with an out-of-the-box configuration for AWS Lambda and AWS X-Ray. Users can enable and disable OpenTelemetry for their Lambda function without changing code. With the ADOT Lambda Layer for Java Auto-instrumentation Agent, all supported libraries are automatically instrumented, with no additional configurations needed.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"AWS Distro for OpenTelemetry Lambda Support For Java (Auto-instrumentation Agent)\",\n  \"description\": \"The AWS managed Lambda layer for ADOT Java Auto-instrumentation Agent provides a plug-and-play user experience by automatically instrumenting a AWS Lambda function, by packaging either the ADOT Java Agent (https://aws-otel.github.io/docs/getting-started/java-sdk/trace-auto-instr) or OpenTelemetry Java SDK (https://aws-otel.github.io/docs/getting-started/java-sdk/trace-manual-instr)together with an out-of-the-box configuration for AWS Lambda and AWS X-Ray. Users can enable and disable OpenTelemetry for their Lambda function without changing code. With the ADOT Lambda Layer for Java Auto-instrumentation Agent, all supported libraries are automatically instrumented, with no additional configurations needed.\",\n  \"path\": \"/docs/getting-started/lambda/lambda-java-auto-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The AWS managed Lambda layer for ADOT Java Auto-instumentation Agent provides a plug-and-play user experience by automatically instrumenting a Lambda function, by packaging the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/java-sdk/trace-auto-instr\"\n  }, \"ADOT Java Agent\"), \" together with an out-of-the-box configuration for AWS Lambda and AWS X-Ray. Users can enable and disable OpenTelemetry for their Lambda function without changing code.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Requirements\"), mdx(\"p\", null, \"The Lambda layer supports Java 11 (Corretto) and Java 17 Lambda runtimes. It \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"does not\"), \" support the Java 8 Lambda runtimes. For more information about supported Java versions, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java#requirements\"\n  }, \"OpenTelemetry Java documentation\"), \".\"), mdx(\"p\", null, \"Note: ADOT Lambda Layer for Java Auto-instrumentation Agent - Automatic instrumentation has a notable impact on startup time on AWS Lambda and you will generally need to use this along with provisioned concurrency and warmup requests to serve production requests without causing timeouts on initial requests while it initializes.\"), mdx(\"h3\", {\n    \"id\": \"add-the-arn-of-the-lambda-layer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#add-the-arn-of-the-lambda-layer\",\n    \"aria-label\": \"add the arn of the lambda layer permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Add the ARN of the Lambda Layer\"), mdx(\"p\", null, \"In this section, we consume the Lambda layer for use with Java Lambda Functions. This includes a reduced version of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-collector\"\n  }, \"AWS Distro for OpenTelemetry Collector (ADOT Collector)\"), \", which runs as a Lambda extension.\"), mdx(\"p\", null, \"Note: Lambda layers are a regionalized resource, meaning that they can only be used in the region in which they are published. Make sure to use the layer in the same region as your Lambda functions.\"), mdx(\"p\", null, \"Find the supported regions and amd64/arm64 layer ARN in the table below for the ARNs to consume. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"amd64\"), \" as architecture \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html\"\n  }, \"for x86-based processors\"), \".\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Supported   Regions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Lambda layer ARN format\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Contents\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ap-northeast-1\", mdx(\"br\", null), \"ap-northeast-2\", mdx(\"br\", null), \"ap-south-1\", mdx(\"br\", null), \"ap-southeast-1\", mdx(\"br\", null), \"ap-southeast-2\", mdx(\"br\", null), \"ca-central-1\", mdx(\"br\", null), \"eu-central-1\", mdx(\"br\", null), \"eu-north-1\", mdx(\"br\", null), \"eu-west-1\", mdx(\"br\", null), \"eu-west-2\", mdx(\"br\", null), \"eu-west-3\", mdx(\"br\", null), \"sa-east-1\", mdx(\"br\", null), \"us-east-1\", mdx(\"br\", null), \"us-east-2\", mdx(\"br\", null), \"us-west-1\", mdx(\"br\", null), \"us-west-2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"arn:aws:lambda:<region\", \">\", \":901920570463:layer:aws-otel-java-agent-<architecture\", \">\", \"-ver-1-32-0:6\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Contains \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-java-instrumentation/releases/tag/v1.32.0\"\n  }, \"ADOT Java Auto-Instrumentation Agent v1.32.0\"), \" \", mdx(\"br\", null), mdx(\"br\", null), \" Contains ADOT Collector v0.43.0\")))), mdx(\"h3\", {\n    \"id\": \"enable-auto-instrumentation-for-your-lambda-function\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#enable-auto-instrumentation-for-your-lambda-function\",\n    \"aria-label\": \"enable auto instrumentation for your lambda function permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Enable auto-instrumentation for your Lambda function\"), mdx(\"p\", null, \"To enable the AWS Distro for OpenTelemetry in your Lambda function, you need to add and configure the layer, and then enable tracing.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open the Lambda function you intend to instrument in the AWS console. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Layers in Designer\"), \" section, choose \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Add a layer\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Under \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"specify an ARN\"), \", paste the layer ARN, and then choose \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Add\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the environment variable AWS_LAMBDA_EXEC_WRAPPER and set it to one of the following options:\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/opt/otel-handler\"), \" - for wrapping regular handlers (implementing RequestHandler)\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html\"\n  }, \"Enable active tracing\"), \" for your AWS Lambda function.\")), mdx(\"p\", null, \"Tips:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"By default, the layer is configured to export traces to AWS X-Ray. Make sure your Lambda role has the required AWS X-Ray permissions.\\nFor more on AWS X-Ray permissions for AWS Lambda, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html#services-xray-permissions\"\n  }, \"AWS Lambda documentation\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"By default, the ADOT Java Agent in the Layer will try to auto-instrument all the code in your application. This can have a negative impact on the Lambda cold startup time.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We recommend that you only enable auto-instrumentation for the libraries/frameworks that are used by your application.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To enable only specific instrumentations you can use the following environment variables:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OTEL_INSTRUMENTATION_COMMON_DEFAULT_ENABLED\"), \" - When set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \", disables auto-instrumentation in the Layer, requiring each instrumentation to be enabled individually.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OTEL_INSTRUMENTATION_[NAME]_ENABLED\"), \" - Set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" to enable auto-instrumentation for a specific library or framework. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[NAME]\"), \" should be replaced by the instrumentation that you want to enable. The full list of available instrumentations can be found in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/#suppressing-specific-agent-instrumentation\"\n  }, \"this link\"), \".\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example, to only enable auto-instrumentation for Lambda and the AWS SDK, you would have to set the following environment variables:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"OTEL_INSTRUMENTATION_COMMON_DEFAULT_ENABLED=false\\nOTEL_INSTRUMENTATION_AWS_LAMBDA_ENABLED=true\\nOTEL_INSTRUMENTATION_AWS_SDK_ENABLED=true\\n\")))), mdx(\"h3\", {\n    \"id\": \"metric-instrumentation-in-your-lambda-function\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#metric-instrumentation-in-your-lambda-function\",\n    \"aria-label\": \"metric instrumentation in your lambda function permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Metric Instrumentation in your Lambda Function\"), mdx(\"p\", null, \"Metric auto instrumentation is supported in OpenTelemetry. You would have to instrument your code in your Lambda application in order to generate application metrics. We will be using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java/tree/main/api/metrics/src/main/java/io/opentelemetry/api/metrics\"\n  }, \"OpenTelemetry Java Metrics API\"), \" to define our metrics. You can define your metric types in a MetricGenerator.java file. To enable exporting metrics for use with backends like Amazon Managed Prometheus, set the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_METRICS_EXPORTER=otlp\"), \".\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Import the OpenTelemetry Java Metrics API into your dependency file\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"dependencies {\\n  implementation platform(\\\"io.opentelemetry:opentelemetry-bom:1.19.0\\\")\\n  implementation('io.opentelemetry:opentelemetry-api')\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create Metric instruments by using the OpenTelemetry Java Metrics API\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// get meter\\nMeter meter = GlobalOpenTelemetry.getMeterProvider()\\n                       .meterBuilder(\\\"aws-otel\\\")\\n                       .setInstrumentationVersion(\\\"1.0\\\")\\n                       .build();\\n\\n// creating a Counter metric to count total API payload bytes sent\\nLongUpDownCounter apiBytesSentCounter = meter\\n        .longUpDownCounterBuilder(\\\"apiBytesSent\\\")\\n        .setDescription(\\\"API request payload sent in bytes\\\")\\n        .setUnit(\\\"one\\\")\\n        .build();\\n        \\n// creating a Histogram metric to record API latency in timeseries\\nLongValueRecorder apiLatencyRecorder = meter\\n        .longValueRecorderBuilder(\\\"latency\\\")\\n        .setDescription(\\\"API latency time\\\")\\n        .setUnit(\\\"ms\\\")\\n        .build();\\n        \\n// creating a Gauge metric to record memory usage at every collection interval\\nLongValueObserver memoryObserver = meter\\n        .gaugeBuilder(\\\"jvm.memory.total\\\")\\n        .setDescription(\\\"Reports JVM memory usage.\\\")\\n        .setUnit(\\\"byte\\\")\\n        .build();\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Record Metric measurements\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// record your metrics\\napiBytesSentCounter.add(100, Labels.of(\\\"apiName\\\", apiName));\\napiLatencyRecorder.record(248, Labels.of(\\\"apiName\\\", apiName));\\nmemoryObserver.observer(Runtime.getRuntime().totalMemory(), Attributes.empty());\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The Lambda layer will take care of exporting the metrics to the Collector and then to AMP.\")), mdx(\"h3\", {\n    \"id\": \"remove-opentelemetry-from-your-lambda-function\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#remove-opentelemetry-from-your-lambda-function\",\n    \"aria-label\": \"remove opentelemetry from your lambda function permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Remove OpenTelemetry from your Lambda function\"), mdx(\"p\", null, \"To disable OpenTelemetry for your Lambda function, remove the Lambda layer, remove the environment variable AWS_LAMBDA_EXEC_WRAPPER, and disable active tracing, as explained in the section above.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#configuration\",\n    \"aria-label\": \"configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configuration\"), mdx(\"p\", null, \"The ADOT Java Auto-instrumentation Agent layer combines both OpenTelemetry Auto Agent and the ADOT Collector. The configuration of the ADOT Collector follows the OpenTelemetry standard.\"), mdx(\"p\", null, \"By default, the ADOT Lambda layer uses the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-lambda/blob/main/adot/collector/config.yaml\"\n  }, \"config.yaml\"), \", which exports telemetry data to AWS X-Ray. To customize the Collector config, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/getting-started/lambda#custom-configuration-for-the-adot-collector-on-lambda\"\n  }, \"main Lambda section for custom configuration instructions\"), \".\"), mdx(\"h2\", {\n    \"id\": \"exporting-metrics-to-amp\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exporting-metrics-to-amp\",\n    \"aria-label\": \"exporting metrics to amp permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Exporting Metrics to AMP\"), mdx(\"p\", null, \"The layer is not configured by default to export Prometheus metrics, see Amazon Managed Service for Prometheus (AMP)\", \"[https://docs.aws.amazon.com/prometheus/latest/userguide/what-is-Amazon-Managed-Service-Prometheus.html]\", \". To enable it:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Upload a custom collector configuration file \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"collector.yaml\"), \" with your Lambda application, like the example shown below, with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prometheusremotewriteexporter\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sigv4authextension\"), \" enabled. Set up the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"endpoint\"), \" of your own AMP workspace, and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"region\"), \" of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sigv4authextension\"), \". \")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# collector.yaml\\nextensions:\\n  sigv4auth:\\n    service: \\\"aps\\\" \\n    region: <workspace_region>\\n\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n      http:\\nexporters:\\n  debug:\\n  awsxray:\\n  prometheusremotewrite:\\n    endpoint: <workspace_remote_write_url>\\n    auth: \\n      authenticator: sigv4auth\\n\\nservice:\\n  extensions: [sigv4auth]\\n  pipelines:\\n    traces:\\n      receivers: [otlp]\\n      exporters: [awsxray]\\n    metrics:\\n      receivers: [otlp]\\n      exporters: [debug, prometheusremotewrite]\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Upload this collector config as the OPENTELEMETRY_COLLECTOR_CONFIG_URI environment variable to configure the Lambda Layer to export metrics to your workspace, following these \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/docs/getting-started/lambda#custom-configuration-for-the-adot-collector-on-lambda\"\n  }, \"instructions\"), \".\")), mdx(\"p\", null, \"Note: If enabling metrics, make sure your Lambda role has the required AWS Prometheus permissions. For more on permissions and policies required on AMP for AWS Lambda, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-and-IAM.html#AMP-IAM-policies-built-in\"\n  }, \"AWS Managed Service for Prometheus documentation\"), \".\"), mdx(\"h2\", {\n    \"id\": \"amp-and-aws-lambda-service-quotas-when-using-the-lambda-layer-for-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#amp-and-aws-lambda-service-quotas-when-using-the-lambda-layer-for-metrics\",\n    \"aria-label\": \"amp and aws lambda service quotas when using the lambda layer for metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"AMP and AWS Lambda Service Quotas when using the Lambda Layer for Metrics\"), mdx(\"p\", null, \"To learn more about the limits for the number of metrics that can be sent through this Lambda Layer to Amazon Service for Prometheus, refer to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/prometheus/latest/userguide/AMP_quotas.html\"\n  }, \"AMP service quotas\"), \". The layer has been tested to output up to the posted service Quotas of AMP without requesting for an increase. This layer has been tested with the maximum concurrency levels of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html\"\n  }, \"AWS Lambda\"), \", of 1000 concurrent invocations and is able to receive all metrics in AMP. Any higher levels of concurrency or of the posted service quota is not guaranteed.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"additional-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#additional-instrumentation\",\n    \"aria-label\": \"additional instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Additional Instrumentation\"), mdx(\"p\", null, \"For additional instrumentation, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java\"\n  }, \"OpenTelemetry Java documentation\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"appendix\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#appendix\",\n    \"aria-label\": \"appendix permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Appendix\"), mdx(\"p\", null, \"Keep up to date with the development of the ADOT Lambda layers \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/aws-observability/aws-otel-lambda\"\n  }, \"here\"), \". If you\\u2019re interested in building your own custom Lambda Layers, visit the upstream \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-lambda\"\n  }, \"opentelemetry-lambda\"), \" repository. \"), mdx(\"p\", null, \"To participate in the discussions to address compatibility gaps between OpenTelemetry and Prometheus, you can also join the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/open-telemetry/wg-prometheus\"\n  }, \"OpenTelemetry Prometheus workgroup\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Requirements"},{"depth":3,"value":"Add the ARN of the Lambda Layer"},{"depth":3,"value":"Enable auto-instrumentation for your Lambda function"},{"depth":3,"value":"Metric Instrumentation in your Lambda Function"},{"depth":3,"value":"Remove OpenTelemetry from your Lambda function"},{"depth":2,"value":"Configuration"},{"depth":2,"value":"Exporting Metrics to AMP"},{"depth":2,"value":"AMP and AWS Lambda Service Quotas when using the Lambda Layer for Metrics"},{"depth":2,"value":"Additional Instrumentation"},{"depth":2,"value":"Appendix"}]}},"pageContext":{"slug":"/docs/getting-started/lambda/lambda-java-auto-instr/","repositoryEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/main/examples/gatsby-theme-docs/src/docs/getting-started/lambda/lambda-java-auto-instr.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["2501019404","973074209"]}